{
  "version": 3,
  "sources": [
    "C:/Users/klein/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/bom/Label.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "define",
    "statics",
    "__styles",
    "fontFamily",
    "fontSize",
    "fontWeight",
    "fontStyle",
    "lineHeight",
    "wordBreak",
    "letterSpacing",
    "__prepareText",
    "el",
    "__createMeasureElement",
    "document",
    "body",
    "insertBefore",
    "firstChild",
    "_textElement",
    "__prepareHtml",
    "_htmlElement",
    "html",
    "dom",
    "Element",
    "create",
    "style",
    "width",
    "height",
    "left",
    "top",
    "visibility",
    "position",
    "overflow",
    "display",
    "whiteSpace",
    "core",
    "Environment",
    "get",
    "inner",
    "createElementNS",
    "padding",
    "margin",
    "key",
    "appendChild",
    "__getStyles",
    "styles",
    "content",
    "win",
    "window",
    "createElement",
    "useHtml",
    "xulel",
    "cursor",
    "color",
    "maxWidth",
    "setAttribute",
    "bom",
    "element",
    "Style",
    "setStyles",
    "setValue",
    "__sanitizer",
    "setSanitizer",
    "func",
    "Assert",
    "assertFunction",
    "Label",
    "value",
    "innerHTML",
    "Attribute",
    "set",
    "getValue",
    "getAttribute",
    "getHtmlSize",
    "undefined",
    "__measureSize",
    "getTextSize",
    "text",
    "keys",
    "size",
    "Dimension",
    "getSize"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Cross browser abstractions to work with labels.\n */\nqx.Bootstrap.define(\"qx.bom.Label\", {\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {Map} Contains all supported styles */\n    __styles: {\n      fontFamily: 1,\n      fontSize: 1,\n      fontWeight: 1,\n      fontStyle: 1,\n      lineHeight: 1,\n      wordBreak: 1,\n      letterSpacing: 1\n    },\n\n    /**\n     * Generates the helper DOM element for text measuring\n     *\n     * @return {Element} Helper DOM element\n     */\n    __prepareText() {\n      var el = this.__createMeasureElement(false);\n      document.body.insertBefore(el, document.body.firstChild);\n\n      return (this._textElement = el);\n    },\n\n    /**\n     * Generates the helper DOM element for HTML measuring\n     *\n     * @return {Element} Helper DOM element\n     */\n    __prepareHtml() {\n      var el = this.__createMeasureElement(true);\n      document.body.insertBefore(el, document.body.firstChild);\n\n      return (this._htmlElement = el);\n    },\n\n    /**\n     * Creates the measure element\n     *\n     * @param html {Boolean?false} Whether HTML markup should be used.\n     * @return {Element} The measure element\n     */\n    __createMeasureElement(html) {\n      var el = qx.dom.Element.create(\"div\");\n      var style = el.style;\n\n      style.width = style.height = \"auto\";\n      style.left = style.top = \"-1000px\";\n      style.visibility = \"hidden\";\n      style.position = \"absolute\";\n      style.overflow = \"visible\";\n      style.display = \"block\";\n\n      if (html) {\n        style.whiteSpace = \"normal\";\n      } else {\n        style.whiteSpace = \"nowrap\";\n\n        if (\n          !qx.core.Environment.get(\"css.textoverflow\") &&\n          qx.core.Environment.get(\"html.xul\")\n        ) {\n          var inner = document.createElementNS(\n            \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\",\n            \"label\"\n          );\n\n          // Force style inheritance for font styles to omit usage of\n          // CSS \"label\" selector, See bug #1349 for details.\n          var style = inner.style;\n          style.padding = \"0\";\n          style.margin = \"0\";\n          style.width = \"auto\";\n\n          for (var key in this.__styles) {\n            style[key] = \"inherit\";\n          }\n\n          el.appendChild(inner);\n        }\n      }\n\n      return el;\n    },\n\n    /**\n     * Returns a map of all styles which should be applied as\n     * a basic set.\n     *\n     * @param html {Boolean?false} Whether HTML markup should be used.\n     * @return {Map} Initial styles which should be applied to a label element.\n     */\n    __getStyles(html) {\n      var styles = {};\n\n      styles.overflow = \"hidden\";\n      if (html) {\n        styles.whiteSpace = \"normal\";\n      } else if (\n        !qx.core.Environment.get(\"css.textoverflow\") &&\n        qx.core.Environment.get(\"html.xul\")\n      ) {\n        styles.display = \"block\";\n      } else {\n        styles.whiteSpace = \"nowrap\";\n        styles[qx.core.Environment.get(\"css.textoverflow\")] = \"ellipsis\";\n      }\n\n      return styles;\n    },\n\n    /**\n     * Creates a label.\n     *\n     * The default mode is 'text' which means that the overlapping text is cut off\n     * using ellipsis automatically. Text wrapping is disabled in this mode\n     * as well. Spaces are normalized. Umlauts and other special symbols are only\n     * allowed in unicode mode as normal characters.\n     *\n     * In the HTML mode you can insert any HTML, but loose the capability to cut\n     * of overlapping text. Automatic text wrapping is enabled by default.\n     *\n     * It is not possible to modify the mode afterwards.\n     *\n     * @param content {String} Content of the label\n     * @param html {Boolean?false} Whether HTML markup should be used.\n     * @param win {Window?null} Window to create the element for\n     * @return {Element} The created iframe node\n     */\n    create(content, html, win) {\n      if (!win) {\n        win = window;\n      }\n\n      var el = win.document.createElement(\"div\");\n\n      if (html) {\n        el.useHtml = true;\n      }\n\n      if (\n        !qx.core.Environment.get(\"css.textoverflow\") &&\n        qx.core.Environment.get(\"html.xul\")\n      ) {\n        // Gecko as of Firefox 2.x and 3.0 does not support ellipsis\n        // for text overflow. We use this feature from XUL instead.\n        var xulel = win.document.createElementNS(\n          \"http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul\",\n          \"label\"\n        );\n\n        var style = xulel.style;\n        style.cursor = \"inherit\";\n        style.color = \"inherit\";\n        style.overflow = \"hidden\";\n        style.maxWidth = \"100%\";\n        style.padding = \"0\";\n        style.margin = \"0\";\n        style.width = \"auto\";\n\n        // Force style inheritance for font styles to omit usage of\n        // CSS \"label\" selector, See bug #1349 for details.\n        for (var key in this.__styles) {\n          xulel.style[key] = \"inherit\";\n        }\n\n        xulel.setAttribute(\"crop\", \"end\");\n\n        el.appendChild(xulel);\n      } else {\n        qx.bom.element.Style.setStyles(el, this.__getStyles(html));\n      }\n\n      if (content) {\n        this.setValue(el, content);\n      }\n\n      return el;\n    },\n\n    /** Sanitizer function */\n    __sanitizer: null,\n\n    /**\n     * Sets a function to sanitize values. It will be used by {@link #setValue}.\n     * The function to sanitize will get the <code>string</code> value and\n     * should return a sanitized / cleared <code>string</code>.\n     *\n     * @param func {Function | null} Function to sanitize / clean HTML code\n     *  from given string parameter\n     */\n    setSanitizer(func) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (func) {\n          qx.core.Assert.assertFunction(func);\n        }\n      }\n\n      qx.bom.Label.__sanitizer = func;\n    },\n\n    /**\n     * Sets the content of the element.\n     *\n     * The possibilities of the value depends on the mode\n     * defined using {@link #create}.\n     *\n     * @param element {Element} DOM element to modify.\n     * @param value {String} Content to insert.\n     */\n    setValue(element, value) {\n      value = value || \"\";\n\n      if (element.useHtml) {\n        if (\n          qx.bom.Label.__sanitizer &&\n          typeof qx.bom.Label.__sanitizer === \"function\"\n        ) {\n          value = qx.bom.Label.__sanitizer(value);\n        }\n        element.innerHTML = value;\n      } else if (\n        !qx.core.Environment.get(\"css.textoverflow\") &&\n        qx.core.Environment.get(\"html.xul\")\n      ) {\n        element.firstChild.setAttribute(\"value\", value);\n      } else {\n        qx.bom.element.Attribute.set(element, \"text\", value);\n      }\n    },\n\n    /**\n     * Returns the content of the element.\n     *\n     * @param element {Element} DOM element to query.\n     * @return {String} Content stored in the element.\n     */\n    getValue(element) {\n      if (element.useHtml) {\n        return element.innerHTML;\n      } else if (\n        !qx.core.Environment.get(\"css.textoverflow\") &&\n        qx.core.Environment.get(\"html.xul\")\n      ) {\n        return element.firstChild.getAttribute(\"value\") || \"\";\n      } else {\n        return qx.bom.element.Attribute.get(element, \"text\");\n      }\n    },\n\n    /**\n     * Returns the preferred dimensions of the given HTML content.\n     *\n     * @param content {String} The HTML markup to measure\n     * @param styles {Map?null} Optional styles to apply\n     * @param width {Integer} To support width for height it is possible to limit the width\n     * @return {Map} A map with preferred <code>width</code> and <code>height</code>.\n     */\n    getHtmlSize(content, styles, width) {\n      var element = this._htmlElement || this.__prepareHtml();\n\n      // apply width\n      element.style.width = width != undefined ? width + \"px\" : \"auto\";\n      // insert content\n      element.innerHTML = content;\n\n      return this.__measureSize(element, styles);\n    },\n\n    /**\n     * Returns the preferred dimensions of the given text.\n     *\n     * @param text {String} The text to measure\n     * @param styles {Map} Optional styles to apply\n     * @return {Map} A map with preferred <code>width</code> and <code>height</code>.\n     */\n    getTextSize(text, styles) {\n      var element = this._textElement || this.__prepareText();\n\n      if (\n        !qx.core.Environment.get(\"css.textoverflow\") &&\n        qx.core.Environment.get(\"html.xul\")\n      ) {\n        element.firstChild.setAttribute(\"value\", text);\n      } else {\n        qx.bom.element.Attribute.set(element, \"text\", text);\n      }\n\n      return this.__measureSize(element, styles);\n    },\n\n    /**\n     * Measure the size of the given element\n     *\n     * @param element {Element} The element to measure\n     * @param styles {Map?null} Optional styles to apply\n     * @return {Map} A map with preferred <code>width</code> and <code>height</code>.\n     */\n    __measureSize(element, styles) {\n      // sync styles\n      var keys = this.__styles;\n\n      if (!styles) {\n        styles = {};\n      }\n\n      for (var key in keys) {\n        element.style[key] = styles[key] || \"\";\n      }\n\n      // detect size\n      var size = qx.bom.element.Dimension.getSize(element);\n\n      // all modern browser are needing one more pixel for width\n      size.width++;\n\n      return size;\n    }\n  }\n});\n"
  ]
}