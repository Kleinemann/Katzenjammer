{
  "version": 3,
  "sources": [
    "C:/Users/klein/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/event/type/Event.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "CAPTURING_PHASE",
    "AT_TARGET",
    "BUBBLING_PHASE",
    "members",
    "_promises",
    "init",
    "canBubble",
    "cancelable",
    "undefined",
    "Assert",
    "assertBoolean",
    "_type",
    "_target",
    "_currentTarget",
    "_relatedTarget",
    "_originalTarget",
    "_stopPropagation",
    "_preventDefault",
    "_bubbles",
    "_cancelable",
    "_timeStamp",
    "Date",
    "getTime",
    "_eventPhase",
    "clone",
    "embryo",
    "event",
    "Pool",
    "getInstance",
    "getObject",
    "constructor",
    "stop",
    "stopPropagation",
    "preventDefault",
    "assertTrue",
    "getType",
    "getPropagationStopped",
    "addPromise",
    "Environment",
    "select",
    "promise",
    "push",
    "Error",
    "classname",
    "getPromises",
    "getDefaultPrevented",
    "Promise",
    "reject",
    "resolve",
    "all",
    "setType",
    "type",
    "getEventPhase",
    "setEventPhase",
    "eventPhase",
    "getTimeStamp",
    "getTarget",
    "setTarget",
    "target",
    "getCurrentTarget",
    "setCurrentTarget",
    "currentTarget",
    "getRelatedTarget",
    "setRelatedTarget",
    "relatedTarget",
    "getOriginalTarget",
    "setOriginalTarget",
    "originalTarget",
    "getBubbles",
    "setBubbles",
    "bubbles",
    "isCancelable",
    "setCancelable",
    "Event"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2007-2008 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Sebastian Werner (wpbasti)\n     * Andreas Ecker (ecker)\n     * Fabian Jakobs (fjakobs)\n\n************************************************************************ */\n\n/**\n * Basic event object.\n *\n * Please note:\n * Event objects are only valid during the event dispatch. After the dispatch\n * event objects are pooled or disposed. If you want to safe a reference to an\n * event instance use the {@link #clone} method.\n *\n * The interface is modeled after the DOM level 2 event interface:\n * http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-interface\n *\n * @use(qx.event.Registration)\n */\nqx.Class.define(\"qx.event.type.Event\", {\n  extend: qx.core.Object,\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** The current event phase is the capturing phase. */\n    CAPTURING_PHASE: 1,\n\n    /** The event is currently being evaluated at the target */\n    AT_TARGET: 2,\n\n    /** The current event phase is the bubbling phase. */\n    BUBBLING_PHASE: 3\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    /** {qx.Promise[]} promises returned by event handlers */\n    _promises: null,\n\n    /**\n     * Initialize the fields of the event. The event must be initialized before\n     * it can be dispatched.\n     *\n     * @param canBubble {Boolean?false} Whether or not the event is a bubbling event.\n     *     If the event is bubbling, the bubbling can be stopped using\n     *     {@link #stopPropagation}\n     * @param cancelable {Boolean?false} Whether or not an event can have its default\n     *     action prevented. The default action can either be the browser's\n     *     default action of a native event (e.g. open the context menu on a\n     *     right click) or the default action of a qooxdoo class (e.g. close\n     *     the window widget). The default action can be prevented by calling\n     *     {@link #preventDefault}\n     * @return {qx.event.type.Event} The initialized event instance\n     */\n    init(canBubble, cancelable) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        if (canBubble !== undefined) {\n          qx.core.Assert.assertBoolean(\n            canBubble,\n            \"Invalid argument value 'canBubble'.\"\n          );\n        }\n\n        if (cancelable !== undefined) {\n          qx.core.Assert.assertBoolean(\n            cancelable,\n            \"Invalid argument value 'cancelable'.\"\n          );\n        }\n      }\n\n      this._type = null;\n      this._target = null;\n      this._currentTarget = null;\n      this._relatedTarget = null;\n      this._originalTarget = null;\n      this._stopPropagation = false;\n      this._preventDefault = false;\n      this._bubbles = !!canBubble;\n      this._cancelable = !!cancelable;\n      this._timeStamp = new Date().getTime();\n      this._eventPhase = null;\n      this._promises = null;\n\n      return this;\n    },\n\n    /**\n     * Create a clone of the event object, which is not automatically disposed\n     * or pooled after an event dispatch.\n     *\n     * @param embryo {qx.event.type.Event?null} Optional event class, which will\n     *     be configured using the data of this event instance. The event must be\n     *     an instance of this event class. If the value is <code>null</code>,\n     *     a new pooled instance is created.\n     * @return {qx.event.type.Event} a clone of this class.\n     */\n    clone(embryo) {\n      if (embryo) {\n        var clone = embryo;\n      } else {\n        var clone = qx.event.Pool.getInstance().getObject(this.constructor);\n      }\n\n      clone._type = this._type;\n      clone._target = this._target;\n      clone._currentTarget = this._currentTarget;\n      clone._relatedTarget = this._relatedTarget;\n      clone._originalTarget = this._originalTarget;\n      clone._stopPropagation = this._stopPropagation;\n      clone._bubbles = this._bubbles;\n      clone._preventDefault = this._preventDefault;\n      clone._cancelable = this._cancelable;\n      clone._promises = this._promises;\n\n      return clone;\n    },\n\n    /**\n     * Stops event from all further processing. Execute this when the\n     * current handler should have \"exclusive rights\" to the event\n     * and no further reaction by anyone else should happen.\n     */\n    stop() {\n      if (this._bubbles) {\n        this.stopPropagation();\n      }\n\n      if (this._cancelable) {\n        this.preventDefault();\n      }\n    },\n\n    /**\n     * This method is used to prevent further propagation of an event during event\n     * flow. If this method is called by any event listener the event will cease\n     * propagating through the tree. The event will complete dispatch to all listeners\n     * on the current event target before event flow stops.\n     *\n     */\n    stopPropagation() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertTrue(\n          this._bubbles,\n          \"Cannot stop propagation on a non bubbling event: \" + this.getType()\n        );\n      }\n      this._stopPropagation = true;\n    },\n\n    /**\n     * Get whether further event propagation has been stopped.\n     *\n     * @return {Boolean} Whether further propagation has been stopped.\n     */\n    getPropagationStopped() {\n      return !!this._stopPropagation;\n    },\n\n    /**\n     * Prevent the default action of cancelable events, e.g. opening the context\n     * menu, ...\n     *\n     */\n    preventDefault() {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertTrue(\n          this._cancelable,\n          \"Cannot prevent default action on a non cancelable event: \" +\n            this.getType()\n        );\n      }\n      this._preventDefault = true;\n    },\n\n    /**\n     * Adds a promise to the list of promises returned by event handlers\n     * @param promise {qx.Promise} the promise to add\n     */\n    addPromise: qx.core.Environment.select(\"qx.promise\", {\n      true(promise) {\n        if (this._promises === null) {\n          this._promises = [promise];\n        } else {\n          this._promises.push(promise);\n        }\n      },\n      false() {\n        throw new Error(\n          this.classname + \".addPromise not supported because qx.promise==false\"\n        );\n      }\n    }),\n\n    /**\n     * Returns the array of promises, or null if there are no promises\n     * @return {qx.Promise[]?}\n     */\n    getPromises: qx.core.Environment.select(\"qx.promise\", {\n      true() {\n        return this._promises;\n      },\n      false() {\n        throw new Error(\n          this.classname +\n            \".getPromises not supported because qx.promise==false\"\n        );\n      }\n    }),\n\n    /**\n     * Returns a promise for this event; if the event is defaultPrevented, the promise\n     * is a rejected promise, otherwise it is fulfilled.  The promise returned will only\n     * be fulfilled when the promises added via {@link addPromise} are also fulfilled\n     */\n    promise: qx.core.Environment.select(\"qx.promise\", {\n      true() {\n        if (this.getDefaultPrevented()) {\n          return qx.Promise.reject();\n        }\n        if (this._promises === null) {\n          return qx.Promise.resolve(true);\n        }\n        return qx.Promise.all(this._promises);\n      },\n      false() {\n        throw new Error(\n          this.classname + \".promise not supported because qx.promise==false\"\n        );\n      }\n    }),\n\n    /**\n     * Get whether the default action has been prevented\n     *\n     * @return {Boolean} Whether the default action has been prevented\n     */\n    getDefaultPrevented() {\n      return !!this._preventDefault;\n    },\n\n    /**\n     * The name of the event\n     *\n     * @return {String} name of the event\n     */\n    getType() {\n      return this._type;\n    },\n\n    /**\n     * Override the event type\n     *\n     * @param type {String} new event type\n     */\n    setType(type) {\n      this._type = type;\n    },\n\n    /**\n     * Used to indicate which phase of event flow is currently being evaluated.\n     *\n     * @return {Integer} The current event phase. Possible values are\n     *         {@link #CAPTURING_PHASE}, {@link #AT_TARGET} and {@link #BUBBLING_PHASE}.\n     */\n    getEventPhase() {\n      return this._eventPhase;\n    },\n\n    /**\n     * Override the event phase\n     *\n     * @param eventPhase {Integer} new event phase\n     */\n    setEventPhase(eventPhase) {\n      this._eventPhase = eventPhase;\n    },\n\n    /**\n     * The time (in milliseconds relative to the epoch) at which the event was created.\n     *\n     * @return {Integer} the timestamp the event was created.\n     */\n    getTimeStamp() {\n      return this._timeStamp;\n    },\n\n    /**\n     * Returns the event target to which the event was originally\n     * dispatched.\n     *\n     * @return {Element} target to which the event was originally\n     *       dispatched.\n     */\n    getTarget() {\n      return this._target;\n    },\n\n    /**\n     * Override event target.\n     *\n     * @param target {Element} new event target\n     */\n    setTarget(target) {\n      this._target = target;\n    },\n\n    /**\n     * Get the event target node whose event listeners are currently being\n     * processed. This is particularly useful during event capturing and\n     * bubbling.\n     *\n     * @return {Element} The target the event listener is currently\n     *       dispatched on.\n     */\n    getCurrentTarget() {\n      return this._currentTarget || this._target;\n    },\n\n    /**\n     * Override current target.\n     *\n     * @param currentTarget {Element} new current target\n     */\n    setCurrentTarget(currentTarget) {\n      this._currentTarget = currentTarget;\n    },\n\n    /**\n     * Get the related event target. This is only configured for\n     * events which also had an influences on another element e.g.\n     * mouseover/mouseout, focus/blur, ...\n     *\n     * @return {Element} The related target\n     */\n    getRelatedTarget() {\n      return this._relatedTarget;\n    },\n\n    /**\n     * Override related target.\n     *\n     * @param relatedTarget {Element} new related target\n     */\n    setRelatedTarget(relatedTarget) {\n      this._relatedTarget = relatedTarget;\n    },\n\n    /**\n     * Get the original event target. This is only configured\n     * for events which are fired by another event (often when\n     * the target should be reconfigured for another view) e.g.\n     * low-level DOM event to widget event.\n     *\n     * @return {Element} The original target\n     */\n    getOriginalTarget() {\n      return this._originalTarget;\n    },\n\n    /**\n     * Override original target.\n     *\n     * @param originalTarget {Element} new original target\n     */\n    setOriginalTarget(originalTarget) {\n      this._originalTarget = originalTarget;\n    },\n\n    /**\n     * Check whether or not the event is a bubbling event. If the event can\n     * bubble the value is true, else the value is false.\n     *\n     * @return {Boolean} Whether the event bubbles\n     */\n    getBubbles() {\n      return this._bubbles;\n    },\n\n    /**\n     * Set whether the event bubbles.\n     *\n     * @param bubbles {Boolean} Whether the event bubbles\n     */\n    setBubbles(bubbles) {\n      this._bubbles = bubbles;\n    },\n\n    /**\n     * Get whether the event is cancelable\n     *\n     * @return {Boolean} Whether the event is cancelable\n     */\n    isCancelable() {\n      return this._cancelable;\n    },\n\n    /**\n     * Set whether the event is cancelable\n     *\n     * @param cancelable {Boolean} Whether the event is cancelable\n     */\n    setCancelable(cancelable) {\n      this._cancelable = cancelable;\n    }\n  }\n});\n"
  ]
}