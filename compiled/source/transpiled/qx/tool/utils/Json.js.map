{
  "version": 3,
  "sources": [
    "C:/Users/klein/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/tool/utils/Json.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Ajv",
    "require",
    "betterAjvErrors",
    "fs",
    "tool",
    "utils",
    "Promisify",
    "Class",
    "define",
    "statics",
    "parseJson",
    "str",
    "trim",
    "ast",
    "json",
    "Parser",
    "parseToAst",
    "Stringify",
    "astToObject",
    "validate",
    "schema",
    "warnOnly",
    "ajv",
    "allErrors",
    "strict",
    "lang",
    "Type",
    "isArray",
    "addSchema",
    "$id",
    "message",
    "errors",
    "format",
    "indent",
    "compiler",
    "Console",
    "warn",
    "err",
    "msg",
    "Array",
    "length",
    "reduce",
    "prev",
    "curr",
    "index",
    "error",
    "dataPath",
    "Error",
    "getSchemaInfo",
    "data",
    "schemaInfo",
    "$schema",
    "match",
    "type",
    "toLocaleLowerCase",
    "version",
    "replace",
    "targets",
    "info",
    "provides",
    "libraries",
    "contribs",
    "Object",
    "getOwnPropertyNames",
    "loadJsonAsync",
    "filename",
    "existsAsync",
    "readFileAsync",
    "Json",
    "saveJsonAsync",
    "writeFileAsync",
    "JSON",
    "stringify",
    "unlinkAsync"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2018 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *      * oetiker\n *      * cboulanger\n *\n * *********************************************************************** */\n\nconst Ajv = require(\"ajv\");\nconst betterAjvErrors = require(\"better-ajv-errors\");\nconst fs = qx.tool.utils.Promisify.fs;\n\nqx.Class.define(\"qx.tool.utils.Json\", {\n  statics: {\n    /**\n     * Parses JSON string into an object\n     * @param str {String} the data to parse\n     * @return {Object}\n     */\n    parseJson(str) {\n      if (str === null || !str.trim()) {\n        return null;\n      }\n      let ast = qx.tool.utils.json.Parser.parseToAst(str.trim());\n      return qx.tool.utils.json.Stringify.astToObject(ast);\n    },\n\n    /**\n     * Validates a json object against the given schema signature and outputs\n     * diagnostic information if validation failed\n     * @param json {Object} The json object to check\n     * @param schema {Array|Object}\n     *    The json-schema object or an array of schema objects. If array,\n     *    only the first is used to validate, but the first schema can\n     *    refer to the others.\n     * @param warnOnly {Boolean} If true, do not throw a fatal error\n     * @return {Boolean}\n     *    Returns true if successful and false on failure if the\n     *    'warnOnly' parameter is true\n     */\n    validate(json, schema, warnOnly = false) {\n      let ajv = new Ajv({\n        allErrors: true,\n        strict: false\n      });\n\n      if (qx.lang.Type.isArray(schema)) {\n        ajv.addSchema(schema);\n        schema = schema[0].$id;\n      }\n      if (ajv.validate(schema, json)) {\n        // success!\n        return true;\n      }\n      if (warnOnly) {\n        const message = betterAjvErrors(schema.$id, json, ajv.errors, {\n          format: \"cli\",\n          indent: 2\n        });\n\n        qx.tool.compiler.Console.warn(\n          \"JSON data does not validate against \" + schema.$id + \":\\n\" + message\n        );\n\n        return false;\n      }\n      // throw fatal error\n      let err = betterAjvErrors(schema.$id, json, ajv.errors, { format: \"js\" });\n      let msg;\n      if (Array.isArray(err) && err.length) {\n        msg = err\n          .reduce(\n            (prev, curr, index) => `${prev} ${index + 1}) ${curr.error}`,\n            \"\"\n          )\n          .trim();\n      } else if (Array.isArray(ajv.errors)) {\n        msg = ajv.errors\n          .reduce(\n            (prev, curr, index) =>\n              `${prev} ${index + 1}) ${curr.dataPath} ${curr.message}`,\n            \"\"\n          )\n          .trim();\n      } else {\n        msg = \"Unknown error during validation.\";\n      }\n      throw new Error(msg);\n    },\n\n    /**\n     * Identify the type and version of the config file schema in the data that\n     * has been passed. Return an object containing type and version of the json\n     * schema, or null if no schema could been detected\n     * Todo: This needs to be rewritten.\n     * @param data {Object} JSON data\n     * @return {{type,version}|null}\n     */\n    getSchemaInfo(data) {\n      let schemaInfo = {};\n      if (data.$schema) {\n        let match = data.$schema.match(/\\/([^-]+)-([^.]+)\\.json$/);\n        if (match) {\n          schemaInfo.type = match[1].toLocaleLowerCase();\n          schemaInfo.version = match[2].replace(/-/g, \".\");\n        } else {\n          // deprecated schema url\n          let match = data.$schema.match(/\\/v([^/]+)\\/([^.]+)\\.json$/);\n          if (match) {\n            schemaInfo.type = match[2].toLocaleLowerCase();\n            schemaInfo.version = match[1];\n          }\n        }\n        // guess file type, this would be easy with the file name!\n      } else if (data.targets) {\n        schemaInfo.type = \"compile\";\n        schemaInfo.version = \"0\";\n      } else if (data.info && data.provides) {\n        schemaInfo.type = \"manifest\";\n        schemaInfo.version = \"0\";\n      } else if (data.libraries || data.contribs) {\n        schemaInfo.type = \"qooxdoo\";\n        schemaInfo.version = \"0\";\n      }\n      // no schema was found\n      if (Object.getOwnPropertyNames(schemaInfo).length === 0) {\n        return null;\n      }\n      return schemaInfo;\n    },\n\n    /**\n     * Loads JSON data from a file and returns it as an object; if the file does not exist, then\n     * null is returned\n     *\n     * @param filename {String} the filename to load\n     * @return {Object|null} the parsed contents, or null if the file does not exist\n     */\n    async loadJsonAsync(filename) {\n      if (!(await fs.existsAsync(filename))) {\n        return null;\n      }\n      let data = await fs.readFileAsync(filename, \"utf8\");\n      try {\n        return qx.tool.utils.Json.parseJson(data);\n      } catch (ex) {\n        throw new Error(\"Failed to load \" + filename + \": \" + ex);\n      }\n    },\n\n    /**\n     * Saves JSON data to a file, or erases the file if data is null\n     *\n     * @param filename {String} filename to write to\n     * @param data {Object|null} the data to write. If null, remove the file\n     */\n    async saveJsonAsync(filename, data) {\n      if (data !== null) {\n        await fs.writeFileAsync(\n          filename,\n          JSON.stringify(data, null, 2),\n          \"utf8\"\n        );\n      } else if (await fs.existsAsync(filename)) {\n        fs.unlinkAsync(filename);\n      }\n    }\n  }\n});\n"
  ]
}