{
  "version": 3,
  "sources": [
    "C:/Users/klein/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/tool/utils/json/Tokenizer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "__tokenTypes",
    "LEFT_BRACE",
    "RIGHT_BRACE",
    "LEFT_BRACKET",
    "RIGHT_BRACKET",
    "COLON",
    "COMMA",
    "STRING",
    "NUMBER",
    "TRUE",
    "FALSE",
    "NULL",
    "COMMENT",
    "WHITESPACE",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "input",
    "settings",
    "tokens",
    "tokenIndex",
    "members",
    "token",
    "Error",
    "length",
    "next",
    "hasMore",
    "tokenTypes",
    "tool",
    "utils",
    "json",
    "Tokenizer",
    "returnWhitespace",
    "type",
    "tokenize",
    "line",
    "column",
    "index",
    "args",
    "matched",
    "parseWhitespace",
    "parseComment",
    "parseChar",
    "parseKeyword",
    "parseString",
    "parseNumber",
    "value",
    "loc",
    "Parser",
    "location",
    "source",
    "rawValue",
    "push",
    "error",
    "cannotTokenizeSymbol",
    "charAt",
    "statics",
    "punctuatorTokensMap",
    "keywordTokensMap",
    "stringStates",
    "_START_",
    "START_QUOTE_OR_CHAR",
    "ESCAPE",
    "escapes",
    "b",
    "f",
    "n",
    "r",
    "t",
    "u",
    "numberStates",
    "MINUS",
    "ZERO",
    "DIGIT",
    "POINT",
    "DIGIT_FRACTION",
    "EXP",
    "EXP_DIGIT_OR_SIGN",
    "isDigit1to9",
    "char",
    "isDigit",
    "isHex",
    "isExp",
    "symbol",
    "str",
    "substring",
    "startIndex",
    "name",
    "hasOwnProperty",
    "substr",
    "buffer",
    "state",
    "result",
    "verbose",
    "i",
    "curChar",
    "passedValueIndex",
    "iterator",
    "parseFloat"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2019 Zenesis Limited, http://www.zenesis.com\n *      Vlad Trushin <monospectr@mail.ru> (https://github.com/vtrushin)\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *      * Vlad Trushin (monospectr@mail.ru, @vtrushin)\n *\n * *********************************************************************** */\n\n/* eslint-disable no-labels */\n/* eslint-disable no-prototype-builtins */\n/* eslint-disable no-redeclare */\n/* eslint-disable no-constant-condition */\n/* eslint-disable no-labels */\n\nconst __tokenTypes = {\n  LEFT_BRACE: 0, // {\n  RIGHT_BRACE: 1, // }\n  LEFT_BRACKET: 2, // [\n  RIGHT_BRACKET: 3, // ]\n  COLON: 4, // :\n  COMMA: 5, // ,\n  STRING: 6, //\n  NUMBER: 7, //\n  TRUE: 8, // true\n  FALSE: 9, // false\n  NULL: 10, // null\n  COMMENT: 11,\n  WHITESPACE: 12\n};\n\n/**\n * Tokenizer, based on json-to-ast by Vlad trushin\n */\nqx.Class.define(\"qx.tool.utils.json.Tokenizer\", {\n  extend: qx.core.Object,\n\n  construct(input, settings) {\n    super();\n    this.input = input;\n    this.settings = settings || {};\n    this.tokens = null;\n    this.tokenIndex = -1;\n  },\n\n  members: {\n    token() {\n      if (this.tokens === null) {\n        throw new Error(\"No tokens to return (have you called tokenize?)\");\n      }\n      if (this.tokenIndex >= this.tokens.length) {\n        throw new Error(\"No more tokens available\");\n      }\n      if (this.tokenIndex < 0) {\n        return this.next();\n      }\n      return this.tokens[this.tokenIndex];\n    },\n\n    hasMore() {\n      const tokenTypes = qx.tool.utils.json.Tokenizer.tokenTypes;\n\n      if (this.tokens === null) {\n        throw new Error(\"No tokens to return (have you called tokenize?)\");\n      }\n\n      if (this.settings.returnWhitespace) {\n        return this.tokenIndex < this.tokens.length;\n      }\n\n      var tokenIndex = this.tokenIndex;\n      if (tokenIndex < 0) {\n        tokenIndex = 0;\n      }\n      for (; tokenIndex < this.tokens.length; tokenIndex++) {\n        var token = this.tokens[tokenIndex];\n        if (\n          token.type != tokenTypes.COMMENT &&\n          token.type != tokenTypes.WHITESPACE\n        ) {\n          return true;\n        }\n      }\n      return false;\n    },\n\n    next() {\n      const tokenTypes = qx.tool.utils.json.Tokenizer.tokenTypes;\n\n      if (this.tokens === null) {\n        throw new Error(\"No tokens to return (have you called tokenize?)\");\n      }\n      if (this.tokenIndex >= this.tokens.length) {\n        throw new Error(\"No more tokens to get\");\n      }\n\n      if (this.settings.returnWhitespace) {\n        if (this.tokenIndex < this.tokens.length) {\n          return this.tokens[++this.tokenIndex];\n        }\n      } else {\n        for (\n          ++this.tokenIndex;\n          this.tokenIndex < this.tokens.length;\n          this.tokenIndex++\n        ) {\n          var token = this.tokens[this.tokenIndex];\n          if (\n            token.type != tokenTypes.COMMENT &&\n            token.type != tokenTypes.WHITESPACE\n          ) {\n            return token;\n          }\n        }\n      }\n\n      return null;\n    },\n\n    tokenize() {\n      const Tokenizer = qx.tool.utils.json.Tokenizer;\n\n      let line = 1;\n      let column = 1;\n      let index = 0;\n      const tokens = (this.tokens = []);\n      var input = this.input;\n\n      while (index < input.length) {\n        const args = [input, index, line, column, this.settings];\n\n        const matched =\n          Tokenizer.parseWhitespace(...args) ||\n          Tokenizer.parseComment(...args) ||\n          Tokenizer.parseChar(...args) ||\n          Tokenizer.parseKeyword(...args) ||\n          Tokenizer.parseString(...args) ||\n          Tokenizer.parseNumber(...args);\n\n        if (matched) {\n          const token = {\n            type: matched.type,\n            value: matched.value,\n            loc: qx.tool.utils.json.Parser.location(\n              line,\n              column,\n              index,\n              matched.line,\n              matched.column,\n              matched.index,\n              this.settings.source\n            )\n          };\n\n          if (matched.rawValue) {\n            token.rawValue = matched.rawValue;\n          }\n\n          tokens.push(token);\n          index = matched.index;\n          line = matched.line;\n          column = matched.column;\n        } else {\n          qx.tool.utils.json.Parser.error(\n            Tokenizer.cannotTokenizeSymbol(input.charAt(index), line, column),\n            input,\n            line,\n            column\n          );\n        }\n      }\n\n      return tokens;\n    }\n  },\n\n  statics: {\n    tokenTypes: __tokenTypes,\n\n    punctuatorTokensMap: {\n      // Lexeme: Token\n      \"{\": __tokenTypes.LEFT_BRACE,\n      \"}\": __tokenTypes.RIGHT_BRACE,\n      \"[\": __tokenTypes.LEFT_BRACKET,\n      \"]\": __tokenTypes.RIGHT_BRACKET,\n      \":\": __tokenTypes.COLON,\n      \",\": __tokenTypes.COMMA\n    },\n\n    keywordTokensMap: {\n      // Lexeme: Token config\n      true: { type: __tokenTypes.TRUE, value: true },\n      false: { type: __tokenTypes.FALSE, value: false },\n      null: { type: __tokenTypes.NULL, value: null }\n    },\n\n    stringStates: {\n      _START_: 0,\n      START_QUOTE_OR_CHAR: 1,\n      ESCAPE: 2\n    },\n\n    escapes: {\n      '\"': '\"', // Quotation mask\n      \"\\\\\": \"\\\\\", // Reverse solidus\n      \"/\": \"/\", // Solidus\n      b: \"\\b\", // Backspace\n      f: \"\\f\", // Form feed\n      n: \"\\n\", // New line\n      r: \"\\r\", // Carriage return\n      t: \"\\t\", // Horizontal tab\n      u: \"u\" // 4 hexadecimal digits\n    },\n\n    numberStates: {\n      _START_: 0,\n      MINUS: 1,\n      ZERO: 2,\n      DIGIT: 3,\n      POINT: 4,\n      DIGIT_FRACTION: 5,\n      EXP: 6,\n      EXP_DIGIT_OR_SIGN: 7\n    },\n\n    // HELPERS\n\n    isDigit1to9(char) {\n      return char >= \"1\" && char <= \"9\";\n    },\n\n    isDigit(char) {\n      return char >= \"0\" && char <= \"9\";\n    },\n\n    isHex(char) {\n      return (\n        qx.tool.utils.json.Tokenizer.isDigit(char) ||\n        (char >= \"a\" && char <= \"f\") ||\n        (char >= \"A\" && char <= \"F\")\n      );\n    },\n\n    isExp(char) {\n      return char === \"e\" || char === \"E\";\n    },\n\n    // ERRORS\n\n    cannotTokenizeSymbol(symbol, line, column) {\n      return `Cannot tokenize symbol <${symbol}> at ${line}:${column}`;\n    },\n\n    // PARSERS\n\n    parseWhitespace(input, index, line, column) {\n      var value = \"\";\n\n      while (true) {\n        var char = input.charAt(index);\n        if (char === \"\\r\") {\n          // CR (Unix)\n          index++;\n          line++;\n          column = 1;\n          value += char;\n          if (input.charAt(index) === \"\\n\") {\n            // CRLF (Windows)\n            index++;\n            value += \"\\n\";\n          }\n        } else if (char === \"\\n\") {\n          // LF (MacOS)\n          index++;\n          line++;\n          column = 1;\n          value += char;\n        } else if (char === \"\\t\" || char === \" \") {\n          index++;\n          column++;\n          value += char;\n        } else {\n          break;\n        }\n      }\n      if (value.length == 0) {\n        return null;\n      }\n\n      return {\n        index,\n        line,\n        column,\n        type: qx.tool.utils.json.Tokenizer.tokenTypes.WHITESPACE,\n        value: value\n      };\n    },\n\n    parseComment(input, index, line, column) {\n      const str = input.substring(index, index + 2);\n      const startIndex = index;\n\n      if (str === \"/*\") {\n        for (index += 2; index < input.length; index++) {\n          var char = input[index];\n          if (char === \"*\" && input[index + 1] === \"/\") {\n            index += 2;\n            column += 2;\n            break;\n          } else if (char === \"\\r\") {\n            // CR (Unix)\n            index++;\n            line++;\n            column = 1;\n            if (input.charAt(index) === \"\\n\") {\n              // CRLF (Windows)\n              index++;\n            }\n          } else if (char === \"\\n\") {\n            // LF (MacOS)\n            index++;\n            line++;\n            column = 1;\n          } else {\n            column++;\n          }\n        }\n        return {\n          index,\n          line,\n          column,\n          type: qx.tool.utils.json.Tokenizer.tokenTypes.COMMENT,\n          value: input.substring(startIndex, index)\n        };\n      } else if (str === \"//\") {\n        for (index += 2; index < input.length; index++) {\n          var char = input[index];\n          if (char === \"\\r\") {\n            // CR (Unix)\n            index++;\n            line++;\n            column = 1;\n            if (input.charAt(index) === \"\\n\") {\n              // CRLF (Windows)\n              index++;\n            }\n            break;\n          } else if (char === \"\\n\") {\n            // LF (MacOS)\n            index++;\n            line++;\n            column = 1;\n            break;\n          }\n        }\n\n        return {\n          index,\n          line,\n          column,\n          type: qx.tool.utils.json.Tokenizer.tokenTypes.COMMENT,\n          value: input.substring(startIndex, index)\n        };\n      }\n\n      return null;\n    },\n\n    parseChar(input, index, line, column) {\n      const char = input.charAt(index);\n      const punctuatorTokensMap =\n        qx.tool.utils.json.Tokenizer.punctuatorTokensMap;\n\n      if (char in punctuatorTokensMap) {\n        return {\n          type: punctuatorTokensMap[char],\n          line,\n          column: column + 1,\n          index: index + 1,\n          value: char\n        };\n      }\n\n      return null;\n    },\n\n    parseKeyword(input, index, line, column) {\n      const keywordTokensMap = qx.tool.utils.json.Tokenizer.keywordTokensMap;\n\n      for (const name in keywordTokensMap) {\n        if (\n          keywordTokensMap.hasOwnProperty(name) &&\n          input.substr(index, name.length) === name\n        ) {\n          const { type, value } = keywordTokensMap[name];\n\n          return {\n            type,\n            line,\n            column: column + name.length,\n            index: index + name.length,\n            value\n          };\n        }\n      }\n\n      return null;\n    },\n\n    parseString(input, index, line, column, settings) {\n      const { stringStates, tokenTypes, escapes } =\n        qx.tool.utils.json.Tokenizer;\n\n      const startIndex = index;\n      let buffer = \"\";\n      let state = stringStates._START_;\n\n      while (index < input.length) {\n        const char = input.charAt(index);\n\n        switch (state) {\n          case stringStates._START_: {\n            if (char === '\"') {\n              state = stringStates.START_QUOTE_OR_CHAR;\n              index++;\n            } else {\n              return null;\n            }\n            break;\n          }\n\n          case stringStates.START_QUOTE_OR_CHAR: {\n            if (char === \"\\\\\") {\n              state = stringStates.ESCAPE;\n              index++;\n            } else if (char === '\"') {\n              index++;\n              var result = {\n                type: tokenTypes.STRING,\n                line,\n                column: column + index - startIndex,\n                index,\n                value: buffer\n              };\n\n              if (settings.verbose) {\n                result.rawValue = input.substring(startIndex, index);\n              }\n              return result;\n            } else {\n              buffer += char;\n              index++;\n            }\n            break;\n          }\n\n          case stringStates.ESCAPE: {\n            if (char in escapes) {\n              if (char === \"u\") {\n                index++;\n                for (let i = 0; i < 4; i++) {\n                  const curChar = input.charAt(index);\n                  if (curChar && qx.tool.utils.json.Tokenizer.isHex(curChar)) {\n                    buffer += curChar;\n                    index++;\n                  } else {\n                    return null;\n                  }\n                }\n              } else {\n                buffer += escapes[char];\n                index++;\n              }\n              state = stringStates.START_QUOTE_OR_CHAR;\n            } else {\n              return null;\n            }\n            break;\n          }\n        }\n      }\n\n      return null;\n    },\n\n    parseNumber(input, index, line, column) {\n      const numberStates = qx.tool.utils.json.Tokenizer.numberStates;\n\n      const startIndex = index;\n      let passedValueIndex = index;\n      let state = numberStates._START_;\n\n      iterator: while (index < input.length) {\n        const char = input.charAt(index);\n\n        switch (state) {\n          case numberStates._START_: {\n            if (char === \"-\") {\n              state = numberStates.MINUS;\n            } else if (char === \"0\") {\n              passedValueIndex = index + 1;\n              state = numberStates.ZERO;\n            } else if (qx.tool.utils.json.Tokenizer.isDigit1to9(char)) {\n              passedValueIndex = index + 1;\n              state = numberStates.DIGIT;\n            } else {\n              return null;\n            }\n            break;\n          }\n\n          case numberStates.MINUS: {\n            if (char === \"0\") {\n              passedValueIndex = index + 1;\n              state = numberStates.ZERO;\n            } else if (qx.tool.utils.json.Tokenizer.isDigit1to9(char)) {\n              passedValueIndex = index + 1;\n              state = numberStates.DIGIT;\n            } else {\n              return null;\n            }\n            break;\n          }\n\n          case numberStates.ZERO: {\n            if (char === \".\") {\n              state = numberStates.POINT;\n            } else if (qx.tool.utils.json.Tokenizer.isExp(char)) {\n              state = numberStates.EXP;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n\n          case numberStates.DIGIT: {\n            if (qx.tool.utils.json.Tokenizer.isDigit(char)) {\n              passedValueIndex = index + 1;\n            } else if (char === \".\") {\n              state = numberStates.POINT;\n            } else if (qx.tool.utils.json.Tokenizer.isExp(char)) {\n              state = numberStates.EXP;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n\n          case numberStates.POINT: {\n            if (qx.tool.utils.json.Tokenizer.isDigit(char)) {\n              passedValueIndex = index + 1;\n              state = numberStates.DIGIT_FRACTION;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n\n          case numberStates.DIGIT_FRACTION: {\n            if (qx.tool.utils.json.Tokenizer.isDigit(char)) {\n              passedValueIndex = index + 1;\n            } else if (qx.tool.utils.json.Tokenizer.isExp(char)) {\n              state = numberStates.EXP;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n\n          case numberStates.EXP: {\n            if (char === \"+\" || char === \"-\") {\n              state = numberStates.EXP_DIGIT_OR_SIGN;\n            } else if (qx.tool.utils.json.Tokenizer.isDigit(char)) {\n              passedValueIndex = index + 1;\n              state = numberStates.EXP_DIGIT_OR_SIGN;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n\n          case numberStates.EXP_DIGIT_OR_SIGN: {\n            if (qx.tool.utils.json.Tokenizer.isDigit(char)) {\n              passedValueIndex = index + 1;\n            } else {\n              break iterator;\n            }\n            break;\n          }\n        }\n\n        index++;\n      }\n\n      if (passedValueIndex > 0) {\n        return {\n          type: qx.tool.utils.json.Tokenizer.tokenTypes.NUMBER,\n          line,\n          column: column + passedValueIndex - startIndex,\n          index: passedValueIndex,\n          value: parseFloat(input.substring(startIndex, passedValueIndex))\n        };\n      }\n\n      return null;\n    }\n  }\n});\n"
  ]
}