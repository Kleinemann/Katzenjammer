{
  "version": 3,
  "sources": [
    "C:/Users/klein/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/tool/utils/json/Writer.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "buffer",
    "__indent",
    "__indentStr",
    "__currentLine",
    "members",
    "write",
    "str",
    "undefined",
    "toString",
    "Error",
    "startPos",
    "pos",
    "indexOf",
    "substring",
    "length",
    "comments",
    "t",
    "forEach",
    "comment",
    "source",
    "indent",
    "count",
    "indentStr",
    "i",
    "line",
    "match",
    "matchIndent",
    "m",
    "oldIndent",
    "resetIndent",
    "tool",
    "utils",
    "json",
    "Writer"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2019 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *\n * *********************************************************************** */\n\n/**\n * Writer for serialising JSON, automatically indenting as required\n */\nqx.Class.define(\"qx.tool.utils.json.Writer\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n    this.buffer = \"\";\n    this.__indent = 0;\n    this.__indentStr = \"\";\n    this.__currentLine = 0;\n  },\n\n  members: {\n    /**\n     * Writes a string/number.  Multiple lines are rewritten with indentation at the\n     * start of each line\n     */\n    write(str) {\n      if (str === null) {\n        str = \"null\";\n      } else if (str === undefined) {\n        str = \"undefined\";\n      } else if (typeof str === \"number\") {\n        str = str.toString();\n      } else if (typeof str === \"boolean\") {\n        str = str ? \"true\" : \"false\";\n      } else if (typeof str !== \"string\") {\n        throw new Error(\"Can only write strings and numbers\");\n      }\n\n      var startPos = 0;\n      /* eslint-disable no-constant-condition */\n      while (true) {\n        var pos = str.indexOf(\"\\n\", startPos);\n        if (pos > -1) {\n          this.buffer += str.substring(startPos, pos + 1);\n          this.__currentLine = this.buffer.length;\n          this.buffer += this.__indentStr;\n          startPos = pos + 1;\n        } else {\n          this.buffer += str.substring(startPos);\n          break;\n        }\n      }\n\n      return this;\n    },\n\n    /**\n     * Outputs comments\n     */\n    comments(comments) {\n      var t = this;\n      if (comments) {\n        comments.forEach(function (comment) {\n          t.write(comment.source + \"\\n\");\n        });\n      }\n    },\n\n    /**\n     * Increases or decreases the indentation level (one indent is two spaces)\n     *\n     * @param count {Number} number to increase/decrease by\n     */\n    indent(count) {\n      if (this.__indent + count < 0) {\n        throw new Error(\"Unbalanced indent\");\n      }\n      this.__indent += count;\n\n      var indentStr = this.__indentStr;\n      if (count > 0) {\n        var str = \"\";\n        for (var i = 0; i < count; i++) {\n          str += \"  \";\n        }\n        indentStr += str;\n      } else {\n        indentStr = indentStr.substring(0, indentStr.length + count * 2);\n      }\n      var line = this.buffer.substring(this.__currentLine);\n      if (!line.match(/[^\\s]/)) {\n        this.buffer = this.buffer.substring(0, this.__currentLine) + indentStr;\n      }\n      this.__indentStr = indentStr;\n\n      return this;\n    },\n\n    /**\n     * Detects the current indentation level in the output, which has been added manually,\n     * ie outside of the `indent()` method.  When outputting an AST via `reprint()`, whitespace\n     * is copied too, this allows the code to adopt whatever indentation level has been\n     * output by the AST so that injecting `prettyPrint()`-ed new objects are at the same\\\n     * level.\n     *\n     * The old indent is returned, and should be passed to `resetIndent()` to restore the\n     * previous value.\n     *\n     * @return {Object} previous indentation\n     */\n    matchIndent() {\n      var line = this.buffer.substring(this.__currentLine);\n      var m = line.match(/^([\\s]*)/);\n      var indent = m[0];\n      var oldIndent = this.__indentStr;\n      this.__indentStr = indent;\n      return oldIndent;\n    },\n\n    /**\n     * Restores the previous indentation settings prior to `matchIndent()`\n     *\n     * @param indent {Object} previous indentation settings\n     */\n    resetIndent(indent) {\n      this.__indentStr = indent;\n    }\n  }\n});\n"
  ]
}