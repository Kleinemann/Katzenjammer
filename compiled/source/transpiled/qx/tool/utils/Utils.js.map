{
  "version": 3,
  "sources": [
    "C:/Users/klein/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/tool/utils/Utils.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "path",
    "require",
    "fs",
    "async",
    "promisify",
    "child_process",
    "psTree",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "statics",
    "newExternalPromise",
    "resolve",
    "reject",
    "promise",
    "Promise",
    "resolve_",
    "reject_",
    "promisifyThis",
    "fn",
    "self",
    "args",
    "slice",
    "push",
    "err",
    "result",
    "apply",
    "ex",
    "UserError",
    "message",
    "name",
    "stack",
    "Error",
    "formatTime",
    "millisec",
    "seconds",
    "Math",
    "floor",
    "minutes",
    "hours",
    "mkpath",
    "dir",
    "cb",
    "normalize",
    "segs",
    "split",
    "sep",
    "made",
    "eachSeries",
    "seg",
    "length",
    "exists",
    "mkdir",
    "code",
    "stat",
    "isDirectory",
    "mkParentPath",
    "pop",
    "join",
    "makeParentDir",
    "filename",
    "bind",
    "makeDirs",
    "LineCountingTransform",
    "StripSourceMapTransform",
    "ToStringWriteStream",
    "isPlainObject",
    "obj",
    "getPrototypeOf",
    "proto",
    "prototype",
    "toString",
    "call",
    "runCommand",
    "cwd",
    "options",
    "filter",
    "value",
    "cmd",
    "shift",
    "error",
    "console",
    "log",
    "env",
    "process",
    "assign",
    "proc",
    "spawn",
    "shell",
    "exitCode",
    "output",
    "messages",
    "stdout",
    "on",
    "data",
    "trim",
    "stderr",
    "run",
    "opts",
    "exe",
    "Logger",
    "debug",
    "tool",
    "utils",
    "Utils",
    "exec",
    "parseCommand",
    "str",
    "inQuote",
    "inArg",
    "lastC",
    "start",
    "i",
    "c",
    "arg",
    "substring",
    "quoteCommand",
    "SPECIALS",
    "map",
    "indexOf",
    "replace",
    "formatCommand",
    "killTree",
    "parentId",
    "children",
    "forEach",
    "item",
    "kill",
    "PID",
    "getTemplateDir",
    "util",
    "ResourceManager",
    "getInstance",
    "toUri",
    "dirname",
    "isExplicitArg",
    "option",
    "searchForOption",
    "argv",
    "defer",
    "Writable",
    "Transform",
    "__lineNumber",
    "chunk",
    "encoding",
    "callback",
    "__lastLine",
    "pos",
    "lastIndexOf",
    "dest",
    "__dest",
    "__value",
    "write"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2017 Zenesis Ltd\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * John Spackman (john.spackman@zenesis.com, @johnspackman)\n\n************************************************************************ */\nconst path = require(\"upath\");\nconst fs = require(\"fs\");\nconst async = require(\"async\");\nconst { promisify } = require(\"util\");\nconst child_process = require(\"child_process\");\nconst psTree = require(\"ps-tree\");\n\n/**\n * Utility methods\n */\nqx.Class.define(\"qx.tool.utils.Utils\", {\n  extend: qx.core.Object,\n\n  statics: {\n    /**\n     * Creates a Promise which can be resolved/rejected externally - it has\n     * the resolve/reject methods as properties\n     *\n     * @returns {Promise} a promise\n     */\n    newExternalPromise() {\n      var resolve;\n      var reject;\n      var promise = new Promise((resolve_, reject_) => {\n        resolve = resolve_;\n        reject = reject_;\n      });\n      promise.resolve = resolve;\n      promise.reject = reject;\n      return promise;\n    },\n\n    promisifyThis(fn, self, ...args) {\n      return new Promise((resolve, reject) => {\n        args = args.slice();\n        args.push(function (err, result) {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(result);\n          }\n        });\n        try {\n          fn.apply(self, args);\n        } catch (ex) {\n          reject(ex);\n        }\n      });\n    },\n\n    /**\n     * Error that can be thrown to indicate wrong user input  and which doesn't\n     * need a stack trace\n     *\n     * @param {string} message\n     * @returns {Error}\n     */\n    UserError: class extends Error {\n      constructor(message) {\n        super(message);\n        this.name = \"UserError\";\n        this.stack = null;\n      }\n    },\n\n    /**\n     * Formats the time in a human readable format, eg \"1h 23m 45.678s\"\n     *\n     * @param {number} millisec\n     * @returns {string} formatted string\n     */\n    formatTime(millisec) {\n      var seconds = Math.floor(millisec / 1000);\n      var minutes = Math.floor(seconds / 60);\n      var hours = Math.floor(minutes / 60);\n      millisec %= 1000;\n\n      var result = \"\";\n      if (hours) {\n        result += (hours > 9 ? hours : \"0\" + hours) + \"h \";\n      }\n      if (hours || minutes) {\n        result += (minutes > 9 ? minutes : \"0\" + minutes) + \"m \";\n      }\n      if (seconds > 9 || (!hours && !minutes)) {\n        result += seconds;\n      } else if (hours || minutes) {\n        result += \"0\" + seconds;\n      }\n      result +=\n        \".\" + (millisec > 99 ? \"\" : millisec > 9 ? \"0\" : \"00\") + millisec + \"s\";\n      return result;\n    },\n\n    /**\n     * Creates a dir\n     * @param dir\n     * @param cb\n     */\n    mkpath(dir, cb) {\n      dir = path.normalize(dir);\n      var segs = dir.split(path.sep);\n      var made = \"\";\n      async.eachSeries(\n        segs,\n        function (seg, cb) {\n          if (made.length || !seg.length) {\n            made += \"/\";\n          }\n          made += seg;\n          fs.exists(made, function (exists) {\n            if (!exists) {\n              fs.mkdir(made, function (err) {\n                if (err && err.code === \"EEXIST\") {\n                  err = null;\n                }\n                cb(err);\n              });\n              return;\n            }\n            fs.stat(made, function (err, stat) {\n              if (err) {\n                cb(err);\n              } else if (stat.isDirectory()) {\n                cb(null);\n              } else {\n                cb(\n                  new Error(\n                    \"Cannot create \" +\n                      made +\n                      \" (in \" +\n                      dir +\n                      \") because it exists and is not a directory\",\n                    \"ENOENT\"\n                  )\n                );\n              }\n            });\n          });\n        },\n        function (err) {\n          cb(err);\n        }\n      );\n    },\n\n    /**\n     * Creates the parent directory of a filename, if it does not already exist\n     */\n    mkParentPath(dir, cb) {\n      var segs = dir.split(/[\\\\\\/]/);\n      segs.pop();\n      if (!segs.length) {\n        return cb && cb();\n      }\n      dir = segs.join(path.sep);\n      return this.mkpath(dir, cb);\n    },\n\n    /**\n     * Creates the parent directory of a filename, if it does not already exist\n     *\n     * @param {string} filename the filename to create the parent directory of\n     *\n     * @return {Promise?} the value\n     */\n    makeParentDir(filename) {\n      const mkParentPath = promisify(this.mkParentPath).bind(this);\n      return mkParentPath(filename);\n    },\n\n    /**\n     * Creates a directory, if it does not exist, including all intermediate paths\n     *\n     * @param {string} filename the directory to create\n     *\n     * @return {Promise?} the value\n     */\n    makeDirs(filename) {\n      const mkpath = promisify(this.mkpath);\n      return mkpath(filename);\n    },\n\n    /**\n     * Writable stream that keeps track of what the current line number is\n     */\n    LineCountingTransform: null,\n\n    /**\n     * Writable stream that strips out sourceMappingURL comments\n     */\n    StripSourceMapTransform: null,\n\n    /**\n     * Writable stream that keeps track of what's been written and can return\n     * a copy as a string\n     */\n    ToStringWriteStream: null,\n\n    /*  Function to test if an object is a plain object, i.e. is constructed\n     **  by the built-in Object constructor and inherits directly from Object.prototype\n     **  or null. Some built-in objects pass the test, e.g. Math which is a plain object\n     **  and some host or exotic objects may pass also.\n     **\n     **  @param {} obj - value to test\n     **  @returns {Boolean} true if passes tests, false otherwise\n     *\n     * @see https://stackoverflow.com/a/5878101/2979698\n     */\n    isPlainObject(obj) {\n      // Basic check for Type object that's not null\n      if (typeof obj == \"object\" && obj !== null) {\n        // If Object.getPrototypeOf supported, use it\n        if (typeof Object.getPrototypeOf == \"function\") {\n          var proto = Object.getPrototypeOf(obj);\n          return proto === Object.prototype || proto === null;\n        }\n\n        // Otherwise, use internal class\n        // This should be reliable as if getPrototypeOf not supported, is pre-ES5\n        return Object.prototype.toString.call(obj) == \"[object Object]\";\n      }\n\n      // Not an object\n      return false;\n    },\n\n    /**\n     * Runs the given command and returns an object containing information on the\n     * `exitCode`, the `output`, potential `error`s, and additional `messages`.\n     * @param {String} cwd The current working directory\n     * @param {String} args One or more command line arguments, including the\n     * command itself\n     * @return {{exitCode: Number, output: String, error: *, messages: *}}\n     */\n    async runCommand(cwd, ...args) {\n      let options = {};\n\n      if (typeof cwd == \"object\") {\n        options = cwd;\n      } else {\n        args = args.filter(value => {\n          if (typeof value == \"string\") {\n            return true;\n          }\n          if (!options) {\n            options = value;\n          }\n          return false;\n        });\n        if (!options.cwd) {\n          options.cwd = cwd;\n        }\n        if (!options.cmd) {\n          options.cmd = args.shift();\n        }\n        if (!options.args) {\n          options.args = args;\n        }\n      }\n      if (!options.error) {\n        options.error = console.error;\n      }\n      if (!options.log) {\n        options.log = console.log;\n      }\n      return await new Promise((resolve, reject) => {\n        let env = process.env;\n        if (options.env) {\n          env = Object.assign({}, env);\n          Object.assign(env, options.env);\n        }\n        let proc = child_process.spawn(options.cmd, options.args, {\n          cwd: options.cwd,\n          shell: true,\n          env: env\n        });\n\n        let result = {\n          exitCode: null,\n          output: \"\",\n          error: \"\",\n          messages: null\n        };\n\n        proc.stdout.on(\"data\", data => {\n          data = data.toString().trim();\n          options.log(data);\n          result.output += data;\n        });\n        proc.stderr.on(\"data\", data => {\n          data = data.toString().trim();\n          options.error(data);\n          result.error += data;\n        });\n        proc.on(\"close\", code => {\n          result.exitCode = code;\n          resolve(result);\n        });\n        proc.on(\"error\", err => {\n          reject(err);\n        });\n      });\n    },\n\n    /**\n     * Awaitable wrapper around child_process.spawn.\n     * Runs a command in a separate process. The output of the command\n     * is ignored. Throws when the exit code is not 0.\n     * @param  {String} cmd Name of the command\n     * @param  {Array} args Array of arguments to the command\n     * @return {Promise<Number>} A promise that resolves with the exit code\n     */\n    run(cmd, args) {\n      let opts = { env: process.env };\n      return new Promise((resolve, reject) => {\n        let exe = child_process.spawn(cmd, args, opts);\n        // suppress all output unless in verbose mode\n        exe.stdout.on(\"data\", data => {\n          qx.log.Logger.debug(data.toString());\n        });\n        exe.stderr.on(\"data\", data => {\n          qx.log.Logger.error(data.toString());\n        });\n        exe.on(\"close\", code => {\n          if (code !== 0) {\n            let message = `Error executing '${cmd} ${args.join(\n              \" \"\n            )}'. Use --verbose to see what went wrong.`;\n            reject(new qx.tool.utils.Utils.UserError(message));\n          } else {\n            resolve(0);\n          }\n        });\n        exe.on(\"error\", reject);\n      });\n    },\n\n    /**\n     * Awaitable wrapper around child_process.exec\n     * Executes a command and return its result wrapped in a Promise.\n     * @param cmd {String} Command with all parameters\n     * @return {Promise<String>} Promise that resolves with the result\n     */\n    exec(cmd) {\n      return new Promise((resolve, reject) => {\n        child_process.exec(cmd, (err, stdout, stderr) => {\n          if (err) {\n            reject(err);\n          }\n          if (stderr) {\n            reject(new Error(stderr));\n          }\n          resolve(stdout);\n        });\n      });\n    },\n\n    /**\n     * Parses a command line and separates them out into an array that can be given to `child_process.spawn` etc\n     *\n     * @param {String} cmd\n     * @returns {String[]}\n     */\n    parseCommand(str) {\n      let inQuote = null;\n      let inArg = false;\n      let lastC = null;\n      let start = 0;\n      let args = [];\n      for (let i = 0; i < str.length; i++) {\n        let c = str[i];\n        if (inQuote) {\n          if (c == inQuote) {\n            inQuote = null;\n          }\n          continue;\n        }\n        if (c == '\"' || c == \"'\") {\n          inQuote = c;\n          if (!inArg) {\n            inArg = true;\n            start = i;\n          }\n          continue;\n        }\n        if (c == \" \" || c == \"\\t\") {\n          if (inArg) {\n            let arg = str.substring(start, i);\n            args.push(arg);\n            inArg = false;\n          }\n        } else {\n          if (!inArg) {\n            inArg = true;\n            start = i;\n          }\n        }\n      }\n      if (inArg) {\n        let arg = str.substring(start);\n        args.push(arg);\n      }\n      return args;\n    },\n\n    /**\n     * Quotes special characters in the argument array, ensuring that they are safe to pass to the command line\n     *\n     * @param {String[]} cmd\n     * @returns {String[]}\n     */\n    quoteCommand(cmd) {\n      const SPECIALS = '&*?;# \"';\n      cmd = cmd.map(arg => {\n        let c = arg[0];\n        if ((c == \"'\" || c == '\"') && c == arg[arg.length - 1]) {\n          return arg;\n        }\n        if (arg.indexOf(\"'\") > -1) {\n          if (arg.indexOf('\"') > -1) {\n            return \"$'\" + arg.replace(/'/g, \"\\\\'\") + \"'\";\n          }\n          return '\"' + arg + '\"';\n        }\n        for (let i = 0; i < SPECIALS.length; i++) {\n          if (arg.indexOf(SPECIALS[i]) > -1) {\n            return \"'\" + arg + \"'\";\n          }\n        }\n        return arg;\n      });\n      return cmd;\n    },\n\n    /**\n     * Reformats a command line\n     *\n     * @param {String} cmd\n     * @returns {String}\n     */\n    formatCommand(cmd) {\n      return qx.tool.utils.Utils.quoteCommand(cmd).join(\" \");\n    },\n\n    /**\n     * Kills a process tree\n     *\n     * @param {Number} parentId parent process ID to kill\n     */\n    async killTree(parentId) {\n      await new qx.Promise((resolve, reject) => {\n        psTree(parentId, function (err, children) {\n          if (err) {\n            reject(err);\n            return;\n          }\n          children.forEach(item => {\n            try {\n              process.kill(item.PID);\n            } catch (ex) {\n              // Nothing\n            }\n          });\n          try {\n            process.kill(parentId);\n          } catch (ex) {\n            // Nothing\n          }\n          resolve();\n        });\n      });\n    },\n\n    /**\n     * Returns the absolute path to the template directory\n     * @return {String}\n     */\n    getTemplateDir() {\n      let dir = qx.util.ResourceManager.getInstance().toUri(\n        \"qx/tool/cli/templates/template_vars.js\"\n      );\n\n      dir = path.dirname(dir);\n      return dir;\n    },\n\n    /**\n     * Detects whether the command line explicit set an option (as opposed to yargs\n     * providing a default value).  Note that this does not handle aliases, use the\n     * actual, full option name.\n     *\n     * @param option {String} the name of the option, eg \"listen-port\"\n     * @return {Boolean}\n     */\n    isExplicitArg(option) {\n      function searchForOption(option) {\n        return process.argv.indexOf(option) > -1;\n      }\n      return searchForOption(`-${option}`) || searchForOption(`--${option}`);\n    }\n  },\n\n  defer(statics) {\n    const { Writable, Transform } = require(\"stream\");\n\n    class LineCountingTransform extends Transform {\n      constructor(options) {\n        super(options);\n        this.__lineNumber = 1;\n      }\n\n      _write(chunk, encoding, callback) {\n        let str = chunk.toString();\n        for (let i = 0; i < str.length; i++) {\n          if (str[i] == \"\\n\") {\n            this.__lineNumber++;\n          }\n        }\n        this.push(str);\n        callback();\n      }\n\n      getLineNumber() {\n        return this.__lineNumber;\n      }\n    }\n\n    statics.LineCountingTransform = LineCountingTransform;\n\n    class StripSourceMapTransform extends Transform {\n      constructor(options) {\n        super(options);\n        this.__lastLine = \"\";\n      }\n\n      _transform(chunk, encoding, callback) {\n        let str = this.__lastLine + chunk.toString();\n        let pos = str.lastIndexOf(\"\\n\");\n        if (pos > -1) {\n          this.__lastLine = str.substring(pos);\n          str = str.substring(0, pos);\n        } else {\n          this.__lastLine = str;\n          str = \"\";\n        }\n        str = str.replace(/\\n\\/\\/\\#\\s*sourceMappingURL=.*$/m, \"\");\n        this.push(str);\n        callback();\n      }\n\n      _flush(callback) {\n        let str = this.__lastLine;\n        this.__lastLine = null;\n        str = str.replace(/\\n\\/\\/\\#\\s*sourceMappingURL=.*$/m, \"\");\n        this.push(str);\n        callback();\n      }\n    }\n\n    statics.StripSourceMapTransform = StripSourceMapTransform;\n\n    class ToStringWriteStream extends Writable {\n      constructor(dest, options) {\n        super(options);\n        this.__dest = dest;\n        this.__value = \"\";\n      }\n\n      _write(chunk, encoding, callback) {\n        this.__value += chunk.toString();\n        if (this.__dest) {\n          this.__dest.write(chunk, encoding, callback);\n        } else if (callback) {\n          callback();\n        }\n      }\n\n      toString() {\n        return this.__value;\n      }\n    }\n\n    statics.ToStringWriteStream = ToStringWriteStream;\n  }\n});\n"
  ]
}