{
  "version": 3,
  "sources": [
    "C:/Users/klein/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/tool/compiler/Console.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "properties",
    "verbose",
    "init",
    "check",
    "machineReadable",
    "writer",
    "nullable",
    "colorOn",
    "members",
    "print",
    "msgId",
    "args",
    "i",
    "length",
    "arg",
    "String",
    "isMachineReadable",
    "str",
    "JSON",
    "stringify",
    "console",
    "log",
    "getWriter",
    "decode",
    "msg",
    "tool",
    "compiler",
    "Console",
    "MESSAGE_IDS",
    "lang",
    "format",
    "message",
    "getMessageType",
    "type",
    "getColorOn",
    "join",
    "debug",
    "info",
    "trace",
    "isVerbose",
    "warn",
    "error",
    "defer",
    "statics",
    "addMessageIds",
    "__INSTANCE",
    "getInstance",
    "obj",
    "id",
    "decodeMarker",
    "marker",
    "showPosition",
    "pos",
    "start",
    "line",
    "column",
    "end",
    "e",
    "Error"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n *\n *    qooxdoo-compiler - node.js based replacement for the Qooxdoo python\n *    toolchain\n *\n *    https://github.com/qooxdoo/qooxdoo\n *\n *    Copyright:\n *      2011-2017 Zenesis Limited, http://www.zenesis.com\n *\n *    License:\n *      MIT: https://opensource.org/licenses/MIT\n *\n *      This software is provided under the same licensing terms as Qooxdoo,\n *      please see the LICENSE file in the Qooxdoo project's top-level directory\n *      for details.\n *\n *    Authors:\n *      * John Spackman (john.spackman@zenesis.com, @johnspackman)\n *\n * *********************************************************************** */\n\n/**\n * The Console handles output of compiler messages for the end user (i.e. not debugging output).\n * The output is based around message IDs, which relate to translatable strings, plus arguments.\n */\nqx.Class.define(\"qx.tool.compiler.Console\", {\n  extend: qx.core.Object,\n\n  properties: {\n    /** Whether verbose logging is enabled */\n    verbose: {\n      init: false,\n      check: \"Boolean\"\n    },\n\n    /** Whether to output all messages as machine readable data structures */\n    machineReadable: {\n      init: false,\n      check: \"Boolean\"\n    },\n\n    /**\n     * Function that is used to output console messages; called with:\n     *   str {String} complete message to output\n     *   msgId {String} original message ID\n     *   ...args {Object...} original arguments to message\n     */\n    writer: {\n      init: null,\n      nullable: true,\n      check: \"Function\"\n    },\n\n    /** Colour prefix for console output */\n    colorOn: {\n      init: \"\",\n      nullable: false,\n      check: \"String\"\n    }\n  },\n\n  members: {\n    /**\n     * Prints the message\n     *\n     * @param msgId {String} translatable message ID\n     * @param args {Object...} arguments\n     */\n    print(msgId, ...args) {\n      for (var i = 0; i < args.length; i++) {\n        var arg = args[i];\n        if (\n          typeof arg !== \"string\" &&\n          typeof arg !== \"number\" &&\n          arg !== null\n        ) {\n          args[i] = String(arg);\n        }\n      }\n      if (this.isMachineReadable()) {\n        let str = \"##\" + msgId + \":\" + JSON.stringify(args);\n        console.log(str);\n      } else {\n        var writer = this.getWriter();\n        let str = this.decode(msgId, ...args);\n        if (writer) {\n          writer(str, msgId, ...args);\n        } else {\n          this.log(str);\n        }\n      }\n    },\n\n    /**\n     * Decodes the message ID and arguments into a string to be presented in the output\n     *\n     * @param msgId {String} translatable message ID\n     * @param args {Object...} arguments\n     * @return {String} complete message\n     */\n    decode(msgId, ...args) {\n      var msg = qx.tool.compiler.Console.MESSAGE_IDS[msgId];\n      if (msg) {\n        let str = qx.lang.String.format(msg.message, args || []);\n        return str;\n      }\n      let str = msgId + JSON.stringify(args);\n      return str;\n    },\n\n    /**\n     * Returns the type of the message, eg error, warning, etc\n     *\n     * @param msgId {String} the message ID to lookup\n     * @return {String} the type of message, can be one of \"message\" (default) or \"error\", \"warning\"\n     */\n    getMessageType(msgId) {\n      let msg = qx.tool.compiler.Console.MESSAGE_IDS[msgId];\n      return msg ? msg.type : null;\n    },\n\n    /**\n     * console.log equivalent, with colorization\n     */\n    log(...args) {\n      console.log(this.getColorOn() + args.join(\" \"));\n    },\n\n    /**\n     * console.debug equivalent, with colorization\n     */\n    debug(...args) {\n      console.debug(this.getColorOn() + args.join(\" \"));\n    },\n\n    /**\n     * console.info equivalent, with colorization\n     */\n    info(...args) {\n      console.info(this.getColorOn() + args.join(\" \"));\n    },\n\n    /**\n     * console.warn equivalent, with colorization, only operates if `verbose` is true\n     */\n    trace(...args) {\n      if (this.isVerbose()) {\n        console.warn(this.getColorOn() + args.join(\" \"));\n      }\n    },\n\n    /**\n     * console.warn equivalent, with colorization\n     */\n    warn(...args) {\n      console.warn(this.getColorOn() + args.join(\" \"));\n    },\n\n    /**\n     * console.error equivalent, with colorization\n     */\n    error(...args) {\n      console.error(this.getColorOn() + args.join(\" \"));\n    }\n  },\n\n  defer(statics) {\n    /*\n     * Errors\n     */\n    statics.addMessageIds(\n      {\n        // Compiler errors (@see {ClassFile})\n        \"qx.tool.compiler.class.invalidProperties\":\n          \"Invalid 'properties' key in class definition\",\n        \"qx.tool.compiler.compiler.missingClassDef\":\n          \"FATAL Missing class definition - no call to qx.Class.define (or qx.Mixin.define etc)\",\n        \"qx.tool.compiler.compiler.syntaxError\": \"FATAL Syntax error: %1\",\n        \"qx.tool.compiler.compiler.invalidExtendClause\":\n          \"FATAL Invalid `extend` clause - expected to find a class name (without quotes or `new`)\",\n        \"qx.tool.compiler.compiler.invalidClassDefinitionEntry\":\n          \"Unexpected property %2 in %1 definition\",\n        \"qx.tool.compiler.compiler.wrongClassName\":\n          \"Wrong class name or filename - expected to find at least %1 but only found [%2]\",\n\n        // Application errors (@see {Application})\n        \"qx.tool.compiler.application.partRecursive\":\n          \"Part %1 has recursive dependencies on other parts\",\n        \"qx.tool.compiler.application.duplicatePartNames\":\n          \"Duplicate parts named '%1'\",\n        \"qx.tool.compiler.application.noBootPart\": \"Cannot find a boot part\",\n        \"qx.tool.compiler.application.conflictingExactPart\":\n          \"Conflicting exact match for %1, could be %2 or %3\",\n        \"qx.tool.compiler.application.conflictingBestPart\":\n          \"Conflicting best match for %1, could be %2 or %3\",\n        \"qx.tool.compiler.application.missingRequiredLibrary\":\n          \"Cannot find required library %1\",\n        \"qx.tool.compiler.application.missingScriptResource\":\n          \"Cannot find script resource: %1\",\n        \"qx.tool.compiler.application.missingCssResource\":\n          \"Cannot find CSS resource: %1\",\n\n        // Target errors (@see {Target})\n        \"qx.tool.compiler.target.missingAppLibrary\":\n          \"Cannot find library required to create application for %1\",\n\n        // Library errors (@see {Library})\n        \"qx.tool.compiler.library.emptyManifest\":\n          \"Empty Manifest.json in library at %1\",\n        \"qx.tool.compiler.library.cannotCorrectCase\":\n          \"Unable to correct case for library in %1 because it uses source/resource directories which are outside the library\",\n        \"qx.tool.compiler.library.cannotFindPath\":\n          \"Cannot find path %2 required by library %1\",\n\n        // Targets\n        \"qx.tool.compiler.build.uglifyParseError\":\n          \"Parse error in output file %4, line %1 column %2: %3\",\n\n        // Fonts\n        \"qx.tool.compiler.webfonts.error\":\n          \"Error compiling webfont %1, error=%2\",\n\n        // Progress\n        \"qx.tool.compiler.maker.appFatalError\":\n          \"Cannot write application '%1' because it has fatal errors\"\n      },\n\n      \"error\"\n    );\n\n    /*\n     * Warnings\n     */\n    statics.addMessageIds(\n      {\n        \"qx.tool.compiler.class.blockedMangle\":\n          \"The mangling of private variable '%1' has been blocked because it is referenced as a string before it is declared\",\n        \"qx.tool.compiler.translate.invalidMessageId\":\n          \"Cannot interpret message ID %1\",\n        \"qx.tool.compiler.translate.invalidMessageIds\":\n          \"Cannot interpret message ID %1, %2\",\n        \"qx.tool.compiler.translate.invalidMessageIds3\":\n          \"Cannot interpret message ID %1, %2, %3\",\n\n        \"qx.tool.compiler.testForUnresolved\":\n          \"Unexpected termination when testing for unresolved symbols, node type %1\",\n        \"qx.tool.compiler.testForFunctionParameterType\":\n          \"Unexpected type of function parameter, node type %1\",\n        \"qx.tool.compiler.defer.unsafe\":\n          \"Unsafe use of 'defer' method to access external class: %1\",\n        \"qx.tool.compiler.symbol.unresolved\": \"Unresolved use of symbol %1\",\n        \"qx.tool.compiler.environment.unreachable\":\n          \"Environment check '%1' may be indeterminable, add to Manifest/provides/environment or use class name prefix\",\n\n        \"qx.tool.compiler.target.missingAppLibrary\":\n          \"Cannot find the application library for %1\",\n        \"qx.tool.compiler.webfonts.noResources\":\n          \"Assets required for webfont %1 are not available in application %2, consider using @asset to include %3\",\n        \"qx.tool.compiler.target.missingBootJs\":\n          \"There is no reference to index.js script in the index.html copied from %1 (see https://git.io/fh7NI)\",\n        /* eslint-disable no-template-curly-in-string */\n        \"qx.tool.compiler.target.missingPreBootJs\":\n          \"There is no reference to ${preBootJs} in the index.html copied from %1 (see https://git.io/fh7NI)\",\n        /* eslint-enable no-template-curly-in-string */\n\n        \"qx.tool.compiler.maker.appNotHeadless\":\n          \"Compiling application '%1' but the target supports non-headless output, you may find unwanted dependencies are loaded during startup\"\n      },\n\n      \"warning\"\n    );\n  },\n\n  statics: {\n    __INSTANCE: null,\n\n    /**\n     * Returns the singleton instance\n     */\n    getInstance() {\n      if (!this.__INSTANCE) {\n        this.__INSTANCE = new qx.tool.compiler.Console();\n      }\n      return this.__INSTANCE;\n    },\n\n    /**\n     * Prints the message\n     *\n     * @param args {Object...} arguments\n     */\n    print(...args) {\n      return this.getInstance().print(...args);\n    },\n\n    /**\n     * Decodes the message ID and arguments into a string to be presented in the output\n     *\n     * @param args {Object...} arguments\n     * @return {String} complete message\n     */\n    decode(...args) {\n      return this.getInstance().decode(...args);\n    },\n\n    /**\n     * console.log equivalent, with colorization\n     */\n    log(...args) {\n      return this.getInstance().log(...args);\n    },\n\n    /**\n     * console.debug equivalent, with colorization\n     */\n    debug(...args) {\n      return this.getInstance().debug(...args);\n    },\n\n    /**\n     * console.info equivalent, with colorization\n     */\n    info(...args) {\n      return this.getInstance().info(...args);\n    },\n\n    /**\n     * console.warn equivalent, with colorization\n     */\n    warn(...args) {\n      return this.getInstance().warn(...args);\n    },\n\n    /**\n     * console.warn equivalent, with colorization, only operates if `verbose` is true\n     */\n    trace(...args) {\n      return this.getInstance().trace(...args);\n    },\n\n    /**\n     * console.error equivalent, with colorization\n     */\n    error(...args) {\n      return this.getInstance().error(...args);\n    },\n\n    /**\n     * Message strings for markers, ie errors and warnings.  The strings are stored as statics\n     * here, but that's because the CLI is currently assembled by hand and therefore does not\n     * support translations.  When the CLI is itself compiled by `qx compile`, these strings\n     * will move into translation files.\n     */\n    MESSAGE_IDS: {},\n\n    /**\n     * Adds message IDs; this is a method because it allows other components (eg qxoodoo-cli) to\n     * use it\n     *\n     * @param obj {Object} map of id strings to message text\n     * @param type {String?} the type of message, can be one of \"message\" (default) or \"error\", \"warning\"\n     */\n    addMessageIds(obj, type) {\n      for (var id in obj) {\n        this.MESSAGE_IDS[id] = {\n          id: id,\n          message: obj[id],\n          type: type || \"message\"\n        };\n      }\n    },\n\n    /**\n     * Decodes a marker into a String description\n     * @param marker {Map} containing:\n     *    msgId {String}\n     *    start {Map} containing:\n     *        line {Integer}\n     *        column? {Integer}\n     *    end? {Map} containing:\n     *        line {Integer}\n     *        column? {Integer}\n     *    args? {Object[]}\n     * @param showPosition {Boolean?} whether to include line/column info (default is true)\n     * @return {String}\n     */\n    decodeMarker(marker, showPosition) {\n      var msg =\n        qx.tool.compiler.Console.MESSAGE_IDS[marker.msgId] || marker.msgId;\n      var type = msg.type ? msg.type + \": \" : \"\";\n      var str = \"\";\n      var pos = marker.pos;\n      if (showPosition !== false && pos && pos.start && pos.start.line) {\n        str += \"[\" + pos.start.line;\n        if (pos.start.column) {\n          str += \",\" + pos.start.column;\n        }\n        if (\n          pos.end &&\n          pos.end.line &&\n          pos.end.line !== pos.start.line &&\n          pos.end.column !== pos.start.column\n        ) {\n          str += \" to \" + pos.end.line;\n          if (pos.end.column) {\n            str += \",\" + pos.end.column;\n          }\n        }\n        str += \"] \";\n      }\n      try {\n        str += type + qx.lang.String.format(msg.message, marker.args || []);\n      } catch (e) {\n        throw new Error(`Unknown message id ${marker.msgId}.`);\n      }\n      return str;\n    }\n  }\n});\n"
  ]
}