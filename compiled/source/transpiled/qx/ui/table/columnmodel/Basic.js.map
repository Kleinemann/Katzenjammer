{
  "version": 3,
  "sources": [
    "C:/Users/klein/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/ui/table/columnmodel/Basic.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "construct",
    "__overallColumnArr",
    "__visibleColumnArr",
    "events",
    "widthChanged",
    "visibilityChangedPre",
    "visibilityChanged",
    "orderChanged",
    "headerCellRendererChanged",
    "statics",
    "DEFAULT_WIDTH",
    "DEFAULT_HEADER_RENDERER",
    "ui",
    "table",
    "headerrenderer",
    "Default",
    "DEFAULT_DATA_RENDERER",
    "cellrenderer",
    "DEFAULT_EDITOR_FACTORY",
    "celleditor",
    "TextField",
    "members",
    "__internalChange",
    "__colToXPosMap",
    "__columnDataArr",
    "__headerRenderer",
    "__dataRenderer",
    "__editorFactory",
    "init",
    "colCount",
    "assertInteger",
    "width",
    "columnmodel",
    "Basic",
    "headerRenderer",
    "dataRenderer",
    "editorFactory",
    "initiallyHiddenColumns",
    "getInitiallyHiddenColumns",
    "col",
    "hidden",
    "length",
    "setColumnVisible",
    "data",
    "visible",
    "isColumnVisible",
    "fireDataEvent",
    "getVisibleColumns",
    "setColumnWidth",
    "isPointerAction",
    "assertNotUndefined",
    "oldWidth",
    "newWidth",
    "getColumnWidth",
    "setHeaderCellRenderer",
    "renderer",
    "assertInterface",
    "IHeaderRenderer",
    "oldRenderer",
    "dispose",
    "setHeaderCellRenderers",
    "renderers",
    "cols",
    "keys",
    "getHeaderCellRenderer",
    "setDataCellRenderer",
    "ICellRenderer",
    "getDataCellRenderer",
    "setCellEditorFactory",
    "factory",
    "ICellEditorFactory",
    "oldFactory",
    "getCellEditorFactory",
    "_getColToXPosMap",
    "overX",
    "visX",
    "getVisibleColumnCount",
    "getVisibleColumnAtX",
    "visXPos",
    "getVisibleX",
    "getOverallColumnCount",
    "getOverallColumnAtX",
    "overXPos",
    "getOverallX",
    "assertBoolean",
    "colToXPosMap",
    "Error",
    "nextVisX",
    "x",
    "currCol",
    "currVisX",
    "splice",
    "moveColumn",
    "fromOverXPos",
    "toOverXPos",
    "setColumnsOrder",
    "newPositions",
    "assertArray",
    "isVisible",
    "Array",
    "colIdx",
    "lang",
    "clone",
    "destruct",
    "i",
    "_disposeObjects"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2006 STZ-IDA, Germany, http://www.stz-ida.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Til Schneider (til132)\n\n************************************************************************ */\n\n/**\n * A model that contains all meta data about columns, such as width, renderer,\n * visibility and order.\n *\n * @see qx.ui.table.ITableModel\n */\nqx.Class.define(\"qx.ui.table.columnmodel.Basic\", {\n  extend: qx.core.Object,\n\n  construct() {\n    super();\n\n    this.__overallColumnArr = [];\n    this.__visibleColumnArr = [];\n  },\n\n  /*\n  *****************************************************************************\n     EVENTS\n  *****************************************************************************\n  */\n\n  events: {\n    /**\n     * Fired when the width of a column has changed. The data property of the event is\n     * a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column the width of which has changed.</li>\n     *   <li>newWidth: The new width of the column in pixels.</li>\n     *   <li>oldWidth: The old width of the column in pixels.</li>\n     * </ul>\n     */\n    widthChanged: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the visibility of a column has changed. This event is equal to\n     * \"visibilityChanged\", but is fired right before.\n     */\n    visibilityChangedPre: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the visibility of a column has changed. The data property of the\n     * event is a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column the visibility of which has changed.</li>\n     *   <li>visible: Whether the column is now visible.</li>\n     * </ul>\n     */\n    visibilityChanged: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the column order has changed. The data property of the\n     * event is a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column that was moved.</li>\n     *   <li>fromOverXPos: The old overall x position of the column.</li>\n     *   <li>toOverXPos: The new overall x position of the column.</li>\n     * </ul>\n     */\n    orderChanged: \"qx.event.type.Data\",\n\n    /**\n     * Fired when the cell renderer of a column has changed.\n     * The data property of the event is a map having the following attributes:\n     * <ul>\n     *   <li>col: The model index of the column that was moved.</li>\n     * </ul>\n     */\n    headerCellRendererChanged: \"qx.event.type.Data\"\n  },\n\n  /*\n  *****************************************************************************\n     STATICS\n  *****************************************************************************\n  */\n\n  statics: {\n    /** @type {Integer} the default width of a column in pixels. */\n    DEFAULT_WIDTH: 100,\n\n    /** @type {qx.ui.table.headerrenderer.Default} the default header cell renderer. */\n    DEFAULT_HEADER_RENDERER: qx.ui.table.headerrenderer.Default,\n\n    /** @type {qx.ui.table.cellrenderer.Default} the default data cell renderer. */\n    DEFAULT_DATA_RENDERER: qx.ui.table.cellrenderer.Default,\n\n    /** @type {qx.ui.table.celleditor.TextField} the default editor factory. */\n    DEFAULT_EDITOR_FACTORY: qx.ui.table.celleditor.TextField\n  },\n\n  /*\n  *****************************************************************************\n     MEMBERS\n  *****************************************************************************\n  */\n\n  members: {\n    __internalChange: null,\n    __colToXPosMap: null,\n    __visibleColumnArr: null,\n    __overallColumnArr: null,\n    __columnDataArr: null,\n\n    __headerRenderer: null,\n    __dataRenderer: null,\n    __editorFactory: null,\n\n    /**\n     * Initializes the column model.\n     *\n     * @param colCount {Integer}\n     *   The number of columns the model should have.\n     *\n     * @param table {qx.ui.table.Table}\n     *   The table to which this column model is attached.\n     */\n    init(colCount, table) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(colCount, \"Invalid argument 'colCount'.\");\n      }\n\n      this.__columnDataArr = [];\n\n      var width = qx.ui.table.columnmodel.Basic.DEFAULT_WIDTH;\n      var headerRenderer =\n        this.__headerRenderer ||\n        (this.__headerRenderer =\n          new qx.ui.table.columnmodel.Basic.DEFAULT_HEADER_RENDERER());\n      var dataRenderer =\n        this.__dataRenderer ||\n        (this.__dataRenderer =\n          new qx.ui.table.columnmodel.Basic.DEFAULT_DATA_RENDERER());\n      var editorFactory =\n        this.__editorFactory ||\n        (this.__editorFactory =\n          new qx.ui.table.columnmodel.Basic.DEFAULT_EDITOR_FACTORY());\n      this.__overallColumnArr = [];\n      this.__visibleColumnArr = [];\n\n      // Get the initially hidden column array, if one was provided. Older\n      // subclasses may not provide the 'table' argument, so we treat them\n      // traditionally with no initially hidden columns.\n      var initiallyHiddenColumns;\n\n      // Was a table provided to us?\n      if (table) {\n        // Yup. Get its list of initially hidden columns, if the user provided\n        // such a list.\n        initiallyHiddenColumns = table.getInitiallyHiddenColumns();\n      }\n\n      // If no table was specified, or if the user didn't provide a list of\n      // initially hidden columns, use an empty list.\n      initiallyHiddenColumns = initiallyHiddenColumns || [];\n\n      for (var col = 0; col < colCount; col++) {\n        this.__columnDataArr[col] = {\n          width: width,\n          headerRenderer: headerRenderer,\n          dataRenderer: dataRenderer,\n          editorFactory: editorFactory\n        };\n\n        this.__overallColumnArr[col] = col;\n        this.__visibleColumnArr[col] = col;\n      }\n\n      this.__colToXPosMap = null;\n\n      // If any columns are initially hidden, hide them now. Make it an\n      // internal change so that events are not generated.\n      this.__internalChange = true;\n      for (var hidden = 0; hidden < initiallyHiddenColumns.length; hidden++) {\n        this.setColumnVisible(initiallyHiddenColumns[hidden], false);\n      }\n      this.__internalChange = false;\n\n      for (col = 0; col < colCount; col++) {\n        var data = {\n          col: col,\n          visible: this.isColumnVisible(col)\n        };\n\n        this.fireDataEvent(\"visibilityChangedPre\", data);\n        this.fireDataEvent(\"visibilityChanged\", data);\n      }\n    },\n\n    /**\n     * Return the array of visible columns\n     *\n     * @return {Array} List of all visible columns\n     */\n    getVisibleColumns() {\n      return this.__visibleColumnArr != null ? this.__visibleColumnArr : [];\n    },\n\n    /**\n     * Sets the width of a column.\n     *\n     * @param col {Integer}\n     *   The model index of the column.\n     *\n     * @param width {Integer}\n     *   The new width the column should get in pixels.\n     *\n     * @param isPointerAction {Boolean}\n     *   <i>true</i> if the column width is being changed as a result of a\n     *   pointer drag in the header; false or undefined otherwise.\n     *\n     */\n    setColumnWidth(col, width, isPointerAction) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInteger(width, \"Invalid argument 'width'.\");\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      var oldWidth = this.__columnDataArr[col].width;\n\n      if (oldWidth != width) {\n        this.__columnDataArr[col].width = width;\n\n        var data = {\n          col: col,\n          newWidth: width,\n          oldWidth: oldWidth,\n          isPointerAction: isPointerAction || false\n        };\n\n        this.fireDataEvent(\"widthChanged\", data);\n      }\n    },\n\n    /**\n     * Returns the width of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Integer} the width of the column in pixels.\n     */\n    getColumnWidth(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      return this.__columnDataArr[col].width;\n    },\n\n    /**\n     * Sets the header renderer of a column. Use setHeaderCellRenderers\n     * instead of this method if you want to set the header renderer of many\n     * columns.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param renderer {qx.ui.table.IHeaderRenderer} the new header renderer the column\n     *      should get.\n     */\n    setHeaderCellRenderer(col, renderer) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInterface(\n          renderer,\n          qx.ui.table.IHeaderRenderer,\n          \"Invalid argument 'renderer'.\"\n        );\n\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      var oldRenderer = this.__columnDataArr[col].headerRenderer;\n      if (oldRenderer !== this.__headerRenderer) {\n        oldRenderer.dispose();\n      }\n\n      this.__columnDataArr[col].headerRenderer = renderer;\n      if (!this.__internalChange) {\n        this.fireDataEvent(\"headerCellRendererChanged\", { col: col });\n      }\n    },\n\n    /**\n     * Sets the header renderer of one or more columns. Use this method, in\n     * favor of setHeaderCellRenderer, if you want to set the header renderer\n     * of many columns. This method fires the \"headerCellRendererChanged\"\n     * event only once, after setting all renderers, whereas\n     * setHeaderCellRenderer fires it for each changed renderer which can be\n     * slow with many columns.\n     *\n     * @param renderers {Map}\n     *   Map, where the keys are column numbers and values are the renderers,\n     *   implementing qx.ui.table.IHeaderRenderer, of the the new header\n     *   renderers for that column\n     */\n    setHeaderCellRenderers(renderers) {\n      var col;\n\n      // Prevent firing \"headerCellRendererChanged\" for each column. Instead,\n      // we'll fire it once at the end.\n      this.__internalChange = true;\n\n      // For each listed column...\n      for (col in renderers) {\n        // ... set that column's renderer\n        this.setHeaderCellRenderer(+col, renderers[col]);\n      }\n\n      // Turn off the internal-change flag so operation returns to normal\n      this.__internalChange = false;\n\n      // Now we can fire the event once. The data indicates which columns\n      // changed. Internally to qooxdoo, nothing cares about the event data.\n      this.fireDataEvent(\"headerCellRendererChanged\", {\n        cols: Object.keys(renderers)\n      });\n    },\n\n    /**\n     * Returns the header renderer of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {qx.ui.table.IHeaderRenderer} the header renderer of the column.\n     */\n    getHeaderCellRenderer(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      return this.__columnDataArr[col].headerRenderer;\n    },\n\n    /**\n     * Sets the data renderer of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param renderer {qx.ui.table.ICellRenderer} the new data renderer\n     *   the column should get.\n     * @return {qx.ui.table.ICellRenderer?null} If an old renderer was set and\n     *   it was not the default renderer, the old renderer is returned for\n     *   pooling or disposing.\n     */\n    setDataCellRenderer(col, renderer) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInterface(\n          renderer,\n          qx.ui.table.ICellRenderer,\n          \"Invalid argument 'renderer'.\"\n        );\n\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      var oldRenderer = this.__columnDataArr[col].dataRenderer;\n      this.__columnDataArr[col].dataRenderer = renderer;\n\n      if (oldRenderer !== this.__dataRenderer) {\n        return oldRenderer;\n      }\n      return null;\n    },\n\n    /**\n     * Returns the data renderer of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {qx.ui.table.ICellRenderer} the data renderer of the column.\n     */\n    getDataCellRenderer(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      return this.__columnDataArr[col].dataRenderer;\n    },\n\n    /**\n     * Sets the cell editor factory of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param factory {qx.ui.table.ICellEditorFactory} the new cell editor factory the column should get.\n     */\n    setCellEditorFactory(col, factory) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertInterface(\n          factory,\n          qx.ui.table.ICellEditorFactory,\n          \"Invalid argument 'factory'.\"\n        );\n\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      var oldFactory = this.__columnDataArr[col].editorFactory;\n      if (oldFactory === factory) {\n        return;\n      }\n      if (oldFactory !== this.__editorFactory) {\n        oldFactory.dispose();\n      }\n\n      this.__columnDataArr[col].editorFactory = factory;\n    },\n\n    /**\n     * Returns the cell editor factory of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {qx.ui.table.ICellEditorFactory} the cell editor factory of the column.\n     */\n    getCellEditorFactory(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertNotUndefined(\n          this.__columnDataArr[col],\n          \"Column not found in table model\"\n        );\n      }\n\n      return this.__columnDataArr[col].editorFactory;\n    },\n\n    /**\n     * Returns the map that translates model indexes to x positions.\n     *\n     * The returned map contains for a model index (int) a map having two\n     * properties: overX (the overall x position of the column, int) and\n     * visX (the visible x position of the column, int). visX is missing for\n     * hidden columns.\n     *\n     * @return {Map} the \"column to x position\" map.\n     */\n    _getColToXPosMap() {\n      if (this.__colToXPosMap == null) {\n        this.__colToXPosMap = {};\n\n        for (var overX = 0; overX < this.__overallColumnArr.length; overX++) {\n          var col = this.__overallColumnArr[overX];\n          this.__colToXPosMap[col] = { overX: overX };\n        }\n\n        for (var visX = 0; visX < this.__visibleColumnArr.length; visX++) {\n          var col = this.__visibleColumnArr[visX];\n          this.__colToXPosMap[col].visX = visX;\n        }\n      }\n\n      return this.__colToXPosMap;\n    },\n\n    /**\n     * Returns the number of visible columns.\n     *\n     * @return {Integer} the number of visible columns.\n     */\n    getVisibleColumnCount() {\n      return this.__visibleColumnArr != null\n        ? this.__visibleColumnArr.length\n        : 0;\n    },\n\n    /**\n     * Returns the model index of a column at a certain visible x position.\n     *\n     * @param visXPos {Integer} the visible x position of the column.\n     * @return {Integer} the model index of the column.\n     */\n    getVisibleColumnAtX(visXPos) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(visXPos, \"Invalid argument 'visXPos'.\");\n      }\n\n      return this.__visibleColumnArr[visXPos];\n    },\n\n    /**\n     * Returns the visible x position of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Integer} the visible x position of the column.\n     */\n    getVisibleX(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n      }\n\n      return this._getColToXPosMap()[col].visX;\n    },\n\n    /**\n     * Returns the overall number of columns (including hidden columns).\n     *\n     * @return {Integer} the overall number of columns.\n     */\n    getOverallColumnCount() {\n      return this.__overallColumnArr.length;\n    },\n\n    /**\n     * Returns the model index of a column at a certain overall x position.\n     *\n     * @param overXPos {Integer} the overall x position of the column.\n     * @return {Integer} the model index of the column.\n     */\n    getOverallColumnAtX(overXPos) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(overXPos, \"Invalid argument 'overXPos'.\");\n      }\n\n      return this.__overallColumnArr[overXPos];\n    },\n\n    /**\n     * Returns the overall x position of a column.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Integer} the overall x position of the column.\n     */\n    getOverallX(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n      }\n\n      return this._getColToXPosMap()[col].overX;\n    },\n\n    /**\n     * Returns whether a certain column is visible.\n     *\n     * @param col {Integer} the model index of the column.\n     * @return {Boolean} whether the column is visible.\n     */\n    isColumnVisible(col) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n      }\n\n      return this._getColToXPosMap()[col].visX != null;\n    },\n\n    /**\n     * Sets whether a certain column is visible.\n     *\n     * @param col {Integer} the model index of the column.\n     * @param visible {Boolean} whether the column should be visible.\n     */\n    setColumnVisible(col, visible) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(col, \"Invalid argument 'col'.\");\n        this.assertBoolean(visible, \"Invalid argument 'visible'.\");\n      }\n\n      if (visible != this.isColumnVisible(col)) {\n        if (visible) {\n          var colToXPosMap = this._getColToXPosMap();\n\n          var overX = colToXPosMap[col].overX;\n\n          if (overX == null) {\n            throw new Error(\n              \"Showing column failed: \" +\n                col +\n                \". The column is not added to this TablePaneModel.\"\n            );\n          }\n\n          // get the visX of the next visible column after the column to show\n          var nextVisX;\n\n          for (var x = overX + 1; x < this.__overallColumnArr.length; x++) {\n            var currCol = this.__overallColumnArr[x];\n            var currVisX = colToXPosMap[currCol].visX;\n\n            if (currVisX != null) {\n              nextVisX = currVisX;\n              break;\n            }\n          }\n\n          // If there comes no visible column any more, then show the column\n          // at the end\n          if (nextVisX == null) {\n            nextVisX = this.__visibleColumnArr.length;\n          }\n\n          // Add the column to the visible columns\n          this.__visibleColumnArr.splice(nextVisX, 0, col);\n        } else {\n          var visX = this.getVisibleX(col);\n          this.__visibleColumnArr.splice(visX, 1);\n        }\n\n        // Invalidate the __colToXPosMap\n        this.__colToXPosMap = null;\n\n        // Inform the listeners\n        if (!this.__internalChange) {\n          var data = {\n            col: col,\n            visible: visible\n          };\n\n          this.fireDataEvent(\"visibilityChangedPre\", data);\n          this.fireDataEvent(\"visibilityChanged\", data);\n        }\n      }\n    },\n\n    /**\n     * Moves a column.\n     *\n     * @param fromOverXPos {Integer} the overall x position of the column to move.\n     * @param toOverXPos {Integer} the overall x position of where the column should be\n     *      moved to.\n     */\n    moveColumn(fromOverXPos, toOverXPos) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertInteger(fromOverXPos, \"Invalid argument 'fromOverXPos'.\");\n        this.assertInteger(toOverXPos, \"Invalid argument 'toOverXPos'.\");\n      }\n\n      this.__internalChange = true;\n\n      var col = this.__overallColumnArr[fromOverXPos];\n      var visible = this.isColumnVisible(col);\n\n      if (visible) {\n        this.setColumnVisible(col, false);\n      }\n\n      this.__overallColumnArr.splice(fromOverXPos, 1);\n      this.__overallColumnArr.splice(toOverXPos, 0, col);\n\n      // Invalidate the __colToXPosMap\n      this.__colToXPosMap = null;\n\n      if (visible) {\n        this.setColumnVisible(col, true);\n      }\n      this.__internalChange = false;\n\n      // Inform the listeners\n      var data = {\n        col: col,\n        fromOverXPos: fromOverXPos,\n        toOverXPos: toOverXPos\n      };\n\n      this.fireDataEvent(\"orderChanged\", data);\n    },\n\n    /**\n     * Reorders all columns to new overall positions. Will fire one \"orderChanged\" event\n     * without data afterwards\n     *\n     * @param newPositions {Integer[]} Array mapping the index of a column in table model to its wanted overall\n     *                            position on screen (both zero based). If the table models holds\n     *                            col0, col1, col2 and col3 and you give [1,3,2,0], the new column order\n     *                            will be col1, col3, col2, col0\n     */\n    setColumnsOrder(newPositions) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        this.assertArray(newPositions, \"Invalid argument 'newPositions'.\");\n      }\n\n      if (newPositions.length == this.__overallColumnArr.length) {\n        this.__internalChange = true;\n\n        // Go through each column an switch visible ones to invisible. Reason is unknown,\n        // this just mimicks the behaviour of moveColumn. Possibly useful because setting\n        // a column visible later updates a map with its screen coords.\n        var isVisible = new Array(newPositions.length);\n        for (\n          var colIdx = 0;\n          colIdx < this.__overallColumnArr.length;\n          colIdx++\n        ) {\n          var visible = this.isColumnVisible(colIdx);\n          isVisible[colIdx] = visible; //Remember, as this relies on this.__colToXPosMap which is cleared below\n          if (visible) {\n            this.setColumnVisible(colIdx, false);\n          }\n        }\n\n        // Store new position values\n        this.__overallColumnArr = qx.lang.Array.clone(newPositions);\n\n        // Invalidate the __colToXPosMap\n        this.__colToXPosMap = null;\n\n        // Go through each column an switch invisible ones back to visible\n        for (\n          var colIdx = 0;\n          colIdx < this.__overallColumnArr.length;\n          colIdx++\n        ) {\n          if (isVisible[colIdx]) {\n            this.setColumnVisible(colIdx, true);\n          }\n        }\n        this.__internalChange = false;\n\n        // Inform the listeners. Do not add data as all known listeners in qooxdoo\n        // only take this event to mean \"total repaint necesscary\". Fabian will look\n        // after deprecating the data part of the orderChanged - event\n        this.fireDataEvent(\"orderChanged\");\n      } else {\n        throw new Error(\n          \"setColumnsOrder: Invalid number of column positions given, expected \" +\n            this.__overallColumnArr.length +\n            \", got \" +\n            newPositions.length\n        );\n      }\n    }\n  },\n\n  /*\n  *****************************************************************************\n     DESTRUCTOR\n  *****************************************************************************\n  */\n\n  destruct() {\n    for (var i = 0; i < this.__columnDataArr.length; i++) {\n      this.__columnDataArr[i].headerRenderer.dispose();\n      this.__columnDataArr[i].dataRenderer.dispose();\n      this.__columnDataArr[i].editorFactory.dispose();\n    }\n\n    this.__overallColumnArr =\n      this.__visibleColumnArr =\n      this.__columnDataArr =\n      this.__colToXPosMap =\n        null;\n\n    this._disposeObjects(\n      \"__headerRenderer\",\n      \"__dataRenderer\",\n      \"__editorFactory\"\n    );\n  }\n});\n"
  ]
}