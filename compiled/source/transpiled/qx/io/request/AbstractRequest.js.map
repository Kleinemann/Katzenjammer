{
  "version": 3,
  "sources": [
    "C:/Users/klein/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/io/request/AbstractRequest.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "type",
    "extend",
    "core",
    "Object",
    "implement",
    "IDisposable",
    "construct",
    "url",
    "undefined",
    "setUrl",
    "__requestHeaders",
    "transport",
    "_transport",
    "_createTransport",
    "_setPhase",
    "__onReadyStateChangeBound",
    "lang",
    "Function",
    "bind",
    "_onReadyStateChange",
    "__onLoadBound",
    "_onLoad",
    "__onLoadEndBound",
    "_onLoadEnd",
    "__onAbortBound",
    "_onAbort",
    "__onTimeoutBound",
    "_onTimeout",
    "__onErrorBound",
    "_onError",
    "onreadystatechange",
    "onload",
    "onloadend",
    "onabort",
    "ontimeout",
    "onerror",
    "events",
    "readyStateChange",
    "success",
    "load",
    "loadEnd",
    "abort",
    "timeout",
    "error",
    "statusError",
    "parseError",
    "fail",
    "changeResponse",
    "changePhase",
    "properties",
    "check",
    "nullable",
    "init",
    "requestData",
    "value",
    "Type",
    "isString",
    "isSubClassOf",
    "constructor",
    "isObject",
    "isArray",
    "getClass",
    "authentication",
    "members",
    "__response",
    "__abort",
    "__phase",
    "__requestHeadersDeprecated",
    "_parserFailed",
    "Error",
    "_getConfiguredUrl",
    "_getConfiguredRequestHeaders",
    "_getParsedResponse",
    "_getMethod",
    "_isAsync",
    "send",
    "method",
    "async",
    "test",
    "replace",
    "getTimeout",
    "Environment",
    "get",
    "debug",
    "open",
    "getRequestData",
    "indexOf",
    "_serializeData",
    "_setRequestHeaders",
    "sendWithPromise",
    "context",
    "req",
    "promise",
    "Promise",
    "resolve",
    "reject",
    "listeners",
    "changeResponseListener",
    "addListener",
    "e",
    "forEach",
    "removeListenerById",
    "push",
    "statusErrorListener",
    "failMessage",
    "String",
    "format",
    "getStatus",
    "getStatusText",
    "err",
    "BaseError",
    "timeoutListener",
    "parseErrorListener",
    "abortListener",
    "errorListener",
    "getReadyState",
    "requestHeaders",
    "_getAllRequestHeaders",
    "key",
    "setRequestHeader",
    "mergeWith",
    "__getAuthRequestHeaders",
    "auth",
    "getAuthentication",
    "headers",
    "getAuthHeaders",
    "header",
    "getRequestHeader",
    "removeRequestHeader",
    "getTransport",
    "readyState",
    "getPhase",
    "status",
    "statusText",
    "getResponseText",
    "responseText",
    "getAllResponseHeaders",
    "getResponseHeader",
    "overrideResponseContentType",
    "contentType",
    "overrideMimeType",
    "getResponseContentType",
    "isDone",
    "getResponse",
    "_setResponse",
    "response",
    "oldResponse",
    "fireEvent",
    "event",
    "Data",
    "__onReadyStateDone",
    "util",
    "Request",
    "isSuccessful",
    "_fireStatefulEvent",
    "evt",
    "Assert",
    "assertString",
    "phase",
    "previousPhase",
    "assertMatch",
    "fireDataEvent",
    "data",
    "isPost",
    "getMethod",
    "isJson",
    "Serializer",
    "toUriParameter",
    "Json",
    "stringify",
    "Uri",
    "toParameter",
    "environment",
    "destruct",
    "noop",
    "window",
    "setTimeout",
    "dispose",
    "io",
    "request",
    "AbstractRequest"
  ],
  "mappings": "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",
  "sourcesContent": [
    "/* ************************************************************************\n\n   qooxdoo - the new era of web development\n\n   http://qooxdoo.org\n\n   Copyright:\n     2004-2011 1&1 Internet AG, Germany, http://www.1und1.de\n\n   License:\n     MIT: https://opensource.org/licenses/MIT\n     See the LICENSE file in the project's top-level directory for details.\n\n   Authors:\n     * Tristan Koch (tristankoch)\n\n************************************************************************ */\n\n/**\n * AbstractRequest serves as a base class for {@link qx.io.request.Xhr}\n * and {@link qx.io.request.Jsonp}. It contains methods to conveniently\n * communicate with transports found in {@link qx.bom.request}.\n *\n * The general procedure to derive a new request is to choose a\n * transport (override {@link #_createTransport}) and link\n * the transport’s response (override {@link #_getParsedResponse}).\n * The transport must implement {@link qx.bom.request.IRequest}.\n *\n * To adjust the behavior of {@link #send} override\n * {@link #_getConfiguredUrl} and {@link #_getConfiguredRequestHeaders}.\n *\n * NOTE: Instances of this class must be disposed of after use\n *\n */\nqx.Class.define(\"qx.io.request.AbstractRequest\", {\n  type: \"abstract\",\n\n  extend: qx.core.Object,\n  implement: [qx.core.IDisposable],\n\n  /**\n   * @param url {String?} The URL of the resource to request.\n   */\n  construct(url) {\n    super();\n\n    if (url !== undefined) {\n      this.setUrl(url);\n    }\n\n    this.__requestHeaders = {};\n\n    var transport = (this._transport = this._createTransport());\n    this._setPhase(\"unsent\");\n\n    this.__onReadyStateChangeBound = qx.lang.Function.bind(\n      this._onReadyStateChange,\n      this\n    );\n\n    this.__onLoadBound = qx.lang.Function.bind(this._onLoad, this);\n    this.__onLoadEndBound = qx.lang.Function.bind(this._onLoadEnd, this);\n    this.__onAbortBound = qx.lang.Function.bind(this._onAbort, this);\n    this.__onTimeoutBound = qx.lang.Function.bind(this._onTimeout, this);\n    this.__onErrorBound = qx.lang.Function.bind(this._onError, this);\n\n    transport.onreadystatechange = this.__onReadyStateChangeBound;\n    transport.onload = this.__onLoadBound;\n    transport.onloadend = this.__onLoadEndBound;\n    transport.onabort = this.__onAbortBound;\n    transport.ontimeout = this.__onTimeoutBound;\n    transport.onerror = this.__onErrorBound;\n  },\n\n  events: {\n    /**\n     * Fired on every change of the transport’s readyState.\n     */\n    readyStateChange: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error and transport’s status\n     * indicates success.\n     */\n    success: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error.\n     */\n    load: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with or without error.\n     */\n    loadEnd: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request is aborted.\n     */\n    abort: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request reaches timeout limit.\n     */\n    timeout: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes with error.\n     */\n    error: \"qx.event.type.Event\",\n\n    /**\n     * Fired when request completes without error but erroneous HTTP status.\n     */\n    statusError: \"qx.event.type.Event\",\n\n    /**\n     * Fired when the configured parser runs into an unrecoverable error.\n     */\n    parseError: \"qx.event.type.Data\",\n\n    /**\n     * Fired on timeout, error or remote error.\n     *\n     * This event is fired for convenience. Usually, it is recommended\n     * to handle error related events in a more fine-grained approach.\n     */\n    fail: \"qx.event.type.Event\",\n\n    /**\n     * Fired on change of the parsed response.\n     *\n     * This event allows to use data binding with the\n     * parsed response as source.\n     *\n     * For example, to bind the response to the value of a label:\n     *\n     * <pre class=\"javascript\">\n     * // req is an instance of qx.io.request.*,\n     * // label an instance of qx.ui.basic.Label\n     * req.bind(\"response\", label, \"value\");\n     * </pre>\n     *\n     * The response is parsed (and therefore changed) only\n     * after the request completes successfully. This means\n     * that when a new request is made the initial empty value\n     * is ignored, instead only the final value is bound.\n     *\n     */\n    changeResponse: \"qx.event.type.Data\",\n\n    /**\n     * Fired on change of the phase.\n     */\n    changePhase: \"qx.event.type.Data\"\n  },\n\n  properties: {\n    /**\n     * The URL of the resource to request.\n     *\n     * Note: Depending on the configuration of the request\n     * and/or the transport chosen, query params may be appended\n     * automatically.\n     */\n    url: {\n      check: \"String\"\n    },\n\n    /**\n     * Timeout limit in milliseconds. Default (0) means no limit.\n     */\n    timeout: {\n      check: \"Number\",\n      nullable: true,\n      init: 0\n    },\n\n    /**\n     * Data to be sent as part of the request.\n     *\n     * Supported types:\n     *\n     * * String\n     * * Map\n     * * qooxdoo Object\n     * * Blob\n     * * ArrayBuffer\n     * * FormData\n     *\n     * For maps, Arrays and qooxdoo objects, a URL encoded string\n     * with unsafe characters escaped is internally generated and sent\n     * as part of the request.\n     *\n     * Depending on the underlying transport and its configuration, the request\n     * data is transparently included as URL query parameters or embedded in the\n     * request body as form data.\n     *\n     * If a string is given the user must make sure it is properly formatted and\n     * escaped. See {@link qx.util.Serializer#toUriParameter}.\n     *\n     */\n    requestData: {\n      check(value) {\n        return (\n          qx.lang.Type.isString(value) ||\n          qx.Class.isSubClassOf(value.constructor, qx.core.Object) ||\n          qx.lang.Type.isObject(value) ||\n          qx.lang.Type.isArray(value) ||\n          qx.Bootstrap.getClass(value) == \"Blob\" ||\n          qx.Bootstrap.getClass(value) == \"ArrayBuffer\" ||\n          qx.Bootstrap.getClass(value) == \"FormData\"\n        );\n      },\n      nullable: true\n    },\n\n    /**\n     * Authentication delegate.\n     *\n     * The delegate must implement {@link qx.io.request.authentication.IAuthentication}.\n     */\n    authentication: {\n      check: \"qx.io.request.authentication.IAuthentication\",\n      nullable: true\n    }\n  },\n\n  members: {\n    /**\n     * Bound handlers.\n     */\n    __onReadyStateChangeBound: null,\n    __onLoadBound: null,\n    __onLoadEndBound: null,\n    __onAbortBound: null,\n    __onTimeoutBound: null,\n    __onErrorBound: null,\n\n    /**\n     * Parsed response.\n     */\n    __response: null,\n\n    /**\n     * Abort flag.\n     */\n    __abort: null,\n\n    /**\n     * Current phase.\n     */\n    __phase: null,\n\n    /**\n     * Request headers.\n     */\n    __requestHeaders: null,\n\n    /**\n     * Request headers (deprecated).\n     */\n    __requestHeadersDeprecated: null,\n\n    /**\n     * Holds transport.\n     */\n    _transport: null,\n\n    /**\n     * Holds information about the parser status for the last request.\n     */\n    _parserFailed: false,\n\n    /*\n    ---------------------------------------------------------------------------\n      CONFIGURE TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Create and return transport.\n     *\n     * This method MUST be overridden, unless the constructor is overridden as\n     * well. It is called by the constructor and should return the transport that\n     * is to be interfaced.\n     *\n     * @return {qx.bom.request} Transport.\n     */\n    _createTransport() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get configured URL.\n     *\n     * A configured URL typically includes a query string that\n     * encapsulates transport specific settings such as request\n     * data or no-cache settings.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The configured URL.\n     */\n    _getConfiguredUrl() {},\n\n    /**\n     * Get configuration related request headers.\n     *\n     * This method MAY be overridden to add request headers for features limited\n     * to a certain transport.\n     *\n     * @return {Map} Map of request headers.\n     */\n    _getConfiguredRequestHeaders() {},\n\n    /**\n     * Get parsed response.\n     *\n     * Is called in the {@link #_onReadyStateChange} event handler\n     * to parse and store the transport’s response.\n     *\n     * This method MUST be overridden.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    _getParsedResponse() {\n      throw new Error(\"Abstract method call\");\n    },\n\n    /**\n     * Get method.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {String} The method.\n     */\n    _getMethod() {\n      return \"GET\";\n    },\n\n    /**\n     * Whether async.\n     *\n     * This method MAY be overridden. It is called in {@link #send}\n     * before the request is initialized.\n     *\n     * @return {Boolean} Whether to process asynchronously.\n     */\n    _isAsync() {\n      return true;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERACT WITH TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Send request.\n     */\n    send() {\n      var transport = this._transport,\n        url,\n        method,\n        async,\n        requestData;\n\n      //\n      // Open request\n      //\n\n      url = this._getConfiguredUrl();\n\n      // Drop fragment (anchor) from URL as per\n      // http://www.w3.org/TR/XMLHttpRequest/#the-open-method\n      if (/\\#/.test(url)) {\n        url = url.replace(/\\#.*/, \"\");\n      }\n\n      transport.timeout = this.getTimeout();\n\n      // Support transports with enhanced feature set\n      method = this._getMethod();\n      async = this._isAsync();\n\n      // Open\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\n          \"Open low-level request with method: \" +\n            method +\n            \", url: \" +\n            url +\n            \", async: \" +\n            async\n        );\n      }\n\n      transport.open(method, url, async);\n      this._setPhase(\"opened\");\n\n      //\n      // Send request\n      //\n\n      requestData = this.getRequestData();\n      if (\n        [\"ArrayBuffer\", \"Blob\", \"FormData\"].indexOf(\n          qx.Bootstrap.getClass(requestData)\n        ) == -1\n      ) {\n        requestData = this._serializeData(requestData);\n      }\n\n      this._setRequestHeaders();\n\n      // Send\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Send low-level request\");\n      }\n\n      method == \"GET\" ? transport.send() : transport.send(requestData);\n      this._setPhase(\"sent\");\n    },\n\n    /**\n     * The same as send() but also return a `qx.Promise` object. The promise\n     * is resolved to this object if the request is successful.\n     *\n     * Calling `abort()` on the request object, rejects the promise. Calling\n     * `cancel()` on the promise aborts the request if the request is not in a\n     * final state.\n     * If the promise has other listener paths, then cancelation of one path will\n     * not have any effect on the request and consequently that call will not\n     * affect the other paths.\n     *\n     * @param context {Object?} optional context to bind the qx.Promise.\n     * @return {qx.Promise} The qx.Promise object\n     * @throws {qx.type.BaseError} If the environment setting `qx.promise` is set to false\n     */\n    sendWithPromise(context) {\n      if (qx.core.Environment.get(\"qx.promise\")) {\n        context = context || this;\n\n        // save this object's context\n        var req = this;\n\n        var promise = new qx.Promise(function (resolve, reject) {\n          var listeners = [];\n\n          var changeResponseListener = req.addListener(\n            \"success\",\n            function (e) {\n              listeners.forEach(req.removeListenerById.bind(req));\n              resolve(req);\n            },\n            this\n          );\n\n          listeners.push(changeResponseListener);\n\n          var statusErrorListener = req.addListener(\n            \"statusError\",\n            function (e) {\n              listeners.forEach(req.removeListenerById.bind(req));\n              var failMessage = qx.lang.String.format(\"%1: %2.\", [\n                req.getStatus(),\n                req.getStatusText()\n              ]);\n\n              var err = new qx.type.BaseError(\"statusError\", failMessage);\n              reject(err);\n            },\n            this\n          );\n\n          listeners.push(statusErrorListener);\n\n          var timeoutListener = req.addListener(\n            \"timeout\",\n            function (e) {\n              listeners.forEach(req.removeListenerById.bind(req));\n              var failMessage = qx.lang.String.format(\n                \"Request failed with timeout after %1 ms.\",\n                [req.getTimeout()]\n              );\n\n              var err = new qx.type.BaseError(\"timeout\", failMessage);\n              reject(err);\n            },\n            this\n          );\n\n          listeners.push(timeoutListener);\n\n          var parseErrorListener = req.addListener(\n            \"parseError\",\n            function (e) {\n              listeners.forEach(req.removeListenerById.bind(req));\n              var failMessage = \"Error parsing the response.\";\n              var err = new qx.type.BaseError(\"parseError\", failMessage);\n              reject(err);\n            },\n            this\n          );\n\n          listeners.push(parseErrorListener);\n\n          var abortListener = req.addListener(\n            \"abort\",\n            function (e) {\n              listeners.forEach(req.removeListenerById.bind(req));\n              var failMessage = \"Request aborted.\";\n              var err = new qx.type.BaseError(\"abort\", failMessage);\n              reject(err);\n            },\n            this\n          );\n\n          listeners.push(abortListener);\n\n          var errorListener = req.addListener(\n            \"error\",\n            function (e) {\n              listeners.forEach(req.removeListenerById.bind(req));\n              var failMessage = \"Request failed.\";\n              var err = new qx.type.BaseError(\"error\", failMessage);\n              reject(err);\n            },\n            this\n          );\n\n          listeners.push(errorListener);\n\n          req.send();\n        }, context).finally(function () {\n          if (req.getReadyState() !== 4) {\n            req.abort();\n          }\n        });\n\n        return promise;\n        // eslint-disable-next-line no-else-return\n      } else {\n        // fail loudly\n        throw new qx.type.BaseError(\n          \"Error\",\n          \"Environment setting qx.promise is set to false.\"\n        );\n      }\n    },\n\n    /**\n     * Abort request.\n     */\n    abort() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Abort request\");\n      }\n      this.__abort = true;\n\n      // Update phase to \"abort\" before user handler are invoked [BUG #5485]\n      this.__phase = \"abort\";\n\n      this._transport.abort();\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n     REQUEST HEADERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Apply configured request headers to transport.\n     *\n     * This method MAY be overridden to customize application of request headers\n     * to transport.\n     */\n    _setRequestHeaders() {\n      var transport = this._transport,\n        requestHeaders = this._getAllRequestHeaders();\n\n      for (var key in requestHeaders) {\n        transport.setRequestHeader(key, requestHeaders[key]);\n      }\n    },\n\n    /**\n     * Get all request headers.\n     *\n     * @return {Map} All request headers.\n     */\n    _getAllRequestHeaders() {\n      var requestHeaders = {};\n      // Transport specific headers\n      qx.lang.Object.mergeWith(\n        requestHeaders,\n        this._getConfiguredRequestHeaders()\n      );\n\n      // Authentication delegate\n      qx.lang.Object.mergeWith(requestHeaders, this.__getAuthRequestHeaders());\n      // User-defined, requestHeaders property (deprecated)\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeadersDeprecated);\n      // User-defined\n      qx.lang.Object.mergeWith(requestHeaders, this.__requestHeaders);\n\n      return requestHeaders;\n    },\n\n    /**\n     * Retrieve authentication headers from auth delegate.\n     *\n     * @return {Map} Authentication related request headers.\n     */\n    __getAuthRequestHeaders() {\n      var auth = this.getAuthentication(),\n        headers = {};\n\n      if (auth) {\n        auth.getAuthHeaders().forEach(function (header) {\n          headers[header.key] = header.value;\n        });\n        return headers;\n      }\n    },\n\n    /**\n     * Set a request header.\n     *\n     * Note: Setting request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     * @param value {String} Value of the header.\n     */\n    setRequestHeader(key, value) {\n      this.__requestHeaders[key] = value;\n    },\n\n    /**\n     * Get a request header.\n     *\n     * @param key {String} Key of the header.\n     * @return {String} The value of the header.\n     */\n    getRequestHeader(key) {\n      return this.__requestHeaders[key];\n    },\n\n    /**\n     * Remove a request header.\n     *\n     * Note: Removing request headers has no effect after the request was send.\n     *\n     * @param key {String} Key of the header.\n     */\n    removeRequestHeader(key) {\n      if (this.__requestHeaders[key]) {\n        delete this.__requestHeaders[key];\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n     QUERY TRANSPORT\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get low-level transport.\n     *\n     * Note: To be used with caution!\n     *\n     * This method can be used to query the transport directly,\n     * but should be used with caution. Especially, it\n     * is not advisable to call any destructive methods\n     * such as <code>open</code> or <code>send</code>.\n     *\n     * @return {Object} An instance of a class found in\n     *  <code>qx.bom.request.*</code>\n     */\n\n    // This method mainly exists so that some methods found in the\n    // low-level transport can be deliberately omitted here,\n    // but still be accessed should it be absolutely necessary.\n    //\n    // Valid use cases include to query the transport’s responseXML\n    // property if performance is critical and any extra parsing\n    // should be avoided at all costs.\n    //\n    getTransport() {\n      return this._transport;\n    },\n\n    /**\n     * Get current ready state.\n     *\n     * States can be:\n     * UNSENT:           0,\n     * OPENED:           1,\n     * HEADERS_RECEIVED: 2,\n     * LOADING:          3,\n     * DONE:             4\n     *\n     * @return {Number} Ready state.\n     */\n    getReadyState() {\n      return this._transport.readyState;\n    },\n\n    /**\n     * Get current phase.\n     *\n     * A more elaborate version of {@link #getReadyState}, this method indicates\n     * the current phase of the request. Maps to stateful (i.e. deterministic)\n     * events (success, abort, timeout, statusError) and intermediate\n     * readyStates (unsent, configured, loading, load).\n     *\n     * When the requests is successful, it progresses the states:<br>\n     * 'unsent', 'opened', 'sent', 'loading', 'load', 'success'\n     *\n     * In case of failure, the final state is one of:<br>\n     * 'abort', 'timeout', 'statusError'\n     *\n     * For each change of the phase, a {@link #changePhase} data event is fired.\n     *\n     * @return {String} Current phase.\n     *\n     */\n    getPhase() {\n      return this.__phase;\n    },\n\n    /**\n     * Get status code.\n     *\n     * @return {Number} The transport’s status code.\n     */\n    getStatus() {\n      return this._transport.status;\n    },\n\n    /**\n     * Get status text.\n     *\n     * @return {String} The transport’s status text.\n     */\n    getStatusText() {\n      return this._transport.statusText;\n    },\n\n    /**\n     * Get raw (unprocessed) response.\n     *\n     * @return {String} The raw response of the request.\n     */\n    getResponseText() {\n      return this._transport.responseText;\n    },\n\n    /**\n     * Get all response headers from response.\n     *\n     * @return {String} All response headers.\n     */\n    getAllResponseHeaders() {\n      return this._transport.getAllResponseHeaders();\n    },\n\n    /**\n     * Get a single response header from response.\n     *\n     * @param key {String}\n     *   Key of the header to get the value from.\n     * @return {String}\n     *   Response header.\n     */\n    getResponseHeader(key) {\n      return this._transport.getResponseHeader(key);\n    },\n\n    /**\n     * Override the content type response header from response.\n     *\n     * @param contentType {String}\n     *   Content type for overriding.\n     * @see qx.bom.request.Xhr#overrideMimeType\n     */\n    overrideResponseContentType(contentType) {\n      return this._transport.overrideMimeType(contentType);\n    },\n\n    /**\n     * Get the content type response header from response.\n     *\n     * @return {String}\n     *   Content type response header.\n     */\n    getResponseContentType() {\n      return this.getResponseHeader(\"Content-Type\");\n    },\n\n    /**\n     * Whether request completed (is done).\n     */\n    isDone() {\n      return this.getReadyState() === 4;\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      RESPONSE\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Get parsed response.\n     *\n     * @return {String} The parsed response of the request.\n     */\n    getResponse() {\n      return this.__response;\n    },\n\n    /**\n     * Set response.\n     *\n     * @param response {String} The parsed response of the request.\n     */\n    _setResponse(response) {\n      var oldResponse = response;\n\n      if (this.__response !== response) {\n        this.__response = response;\n        this.fireEvent(\"changeResponse\", qx.event.type.Data, [\n          this.__response,\n          oldResponse\n        ]);\n      }\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      EVENT HANDLING\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Handle \"readyStateChange\" event.\n     */\n    _onReadyStateChange() {\n      var readyState = this.getReadyState();\n\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Fire readyState: \" + readyState);\n      }\n\n      this.fireEvent(\"readyStateChange\");\n\n      // Transport switches to readyState DONE on abort and may already\n      // have successful HTTP status when response is served from cache.\n      //\n      // Not fire custom event \"loading\" (or \"success\", when cached).\n      if (this.__abort) {\n        return;\n      }\n\n      if (readyState === 3) {\n        this._setPhase(\"loading\");\n      }\n\n      if (this.isDone()) {\n        this.__onReadyStateDone();\n      }\n    },\n\n    /**\n     * Called internally when readyState is DONE.\n     */\n    __onReadyStateDone() {\n      if (qx.core.Environment.get(\"qx.debug.io\")) {\n        this.debug(\"Request completed with HTTP status: \" + this.getStatus());\n      }\n\n      // Event \"load\" fired in onLoad\n      this._setPhase(\"load\");\n\n      // Successful HTTP status\n      if (qx.util.Request.isSuccessful(this.getStatus())) {\n        // Parse response\n        if (qx.core.Environment.get(\"qx.debug.io\")) {\n          this.debug(\n            \"Response is of type: '\" + this.getResponseContentType() + \"'\"\n          );\n        }\n\n        this._setResponse(this._getParsedResponse());\n\n        if (this._parserFailed) {\n          this.fireEvent(\"fail\");\n        } else {\n          this._fireStatefulEvent(\"success\");\n        }\n\n        // Erroneous HTTP status\n      } else {\n        try {\n          this._setResponse(this._getParsedResponse());\n        } catch (e) {\n          // ignore if it does not work\n        }\n\n        // A remote error failure\n        if (this.getStatus() !== 0) {\n          this._fireStatefulEvent(\"statusError\");\n          this.fireEvent(\"fail\");\n        }\n      }\n    },\n\n    /**\n     * Handle \"load\" event.\n     */\n    _onLoad() {\n      this.fireEvent(\"load\");\n    },\n\n    /**\n     * Handle \"loadEnd\" event.\n     */\n    _onLoadEnd() {\n      this.fireEvent(\"loadEnd\");\n    },\n\n    /**\n     * Handle \"abort\" event.\n     */\n    _onAbort() {\n      this._fireStatefulEvent(\"abort\");\n    },\n\n    /**\n     * Handle \"timeout\" event.\n     */\n    _onTimeout() {\n      this._fireStatefulEvent(\"timeout\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /**\n     * Handle \"error\" event.\n     */\n    _onError() {\n      this.fireEvent(\"error\");\n\n      // A network error failure\n      this.fireEvent(\"fail\");\n    },\n\n    /*\n    ---------------------------------------------------------------------------\n      INTERNAL / HELPERS\n    ---------------------------------------------------------------------------\n    */\n\n    /**\n     * Fire stateful event.\n     *\n     * Fires event and sets phase to name of event.\n     *\n     * @param evt {String} Name of the event to fire.\n     */\n    _fireStatefulEvent(evt) {\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(evt);\n      }\n      this._setPhase(evt);\n      this.fireEvent(evt);\n    },\n\n    /**\n     * Set phase.\n     *\n     * @param phase {String} The phase to set.\n     */\n    _setPhase(phase) {\n      var previousPhase = this.__phase;\n\n      if (qx.core.Environment.get(\"qx.debug\")) {\n        qx.core.Assert.assertString(phase);\n        qx.core.Assert.assertMatch(\n          phase,\n          /^(unsent)|(opened)|(sent)|(loading)|(load)|(success)|(abort)|(timeout)|(statusError)$/\n        );\n      }\n\n      this.__phase = phase;\n      this.fireDataEvent(\"changePhase\", phase, previousPhase);\n    },\n\n    /**\n     * Serialize data.\n     *\n     * @param data {String|Map|qx.core.Object} Data to serialize.\n     * @return {String|null} Serialized data.\n     */\n    _serializeData(data) {\n      var isPost =\n          typeof this.getMethod !== \"undefined\" && this.getMethod() == \"POST\",\n        isJson = /application\\/.*\\+?json/.test(\n          this.getRequestHeader(\"Content-Type\")\n        );\n\n      if (!data) {\n        return null;\n      }\n\n      if (qx.lang.Type.isString(data)) {\n        return data;\n      }\n\n      if (qx.Class.isSubClassOf(data.constructor, qx.core.Object)) {\n        return qx.util.Serializer.toUriParameter(data);\n      }\n\n      if (\n        isJson &&\n        (qx.lang.Type.isObject(data) || qx.lang.Type.isArray(data))\n      ) {\n        return qx.lang.Json.stringify(data);\n      }\n\n      if (qx.lang.Type.isObject(data)) {\n        return qx.util.Uri.toParameter(data, isPost);\n      }\n\n      return null;\n    }\n  },\n\n  environment: {\n    \"qx.debug.io\": false\n  },\n\n  destruct() {\n    var transport = this._transport,\n      noop = function () {};\n\n    if (this._transport) {\n      transport.onreadystatechange =\n        transport.onload =\n        transport.onloadend =\n        transport.onabort =\n        transport.ontimeout =\n        transport.onerror =\n          noop;\n\n      // [BUG #8315] dispose asynchronously to work with Sinon.js fake server\n      window.setTimeout(function () {\n        transport.dispose();\n      }, 0);\n    }\n    this.__response = null;\n  }\n});\n"
  ]
}