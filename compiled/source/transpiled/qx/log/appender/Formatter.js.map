{
  "version": 3,
  "sources": [
    "C:/Users/klein/AppData/Roaming/npm/node_modules/@qooxdoo/framework/source/class/qx/log/appender/Formatter.js"
  ],
  "names": [
    "qx",
    "Bootstrap",
    "executePendingDefers",
    "$$dbClassInfo",
    "Class",
    "define",
    "extend",
    "core",
    "Object",
    "properties",
    "formatTimeAs",
    "init",
    "check",
    "members",
    "formatOffset",
    "offset",
    "length",
    "str",
    "toString",
    "diff",
    "pad",
    "i",
    "formatEntryTime",
    "entry",
    "getFormatTimeAs",
    "log",
    "appender",
    "Formatter",
    "__DATETIME_FORMAT",
    "util",
    "format",
    "DateFormat",
    "time",
    "normalizeEntryClass",
    "result",
    "clazz",
    "object",
    "hash",
    "obj",
    "win",
    "ObjectRegistry",
    "fromHashCode",
    "constructor",
    "formatEntryObjectAndClass",
    "breakdown",
    "classname",
    "formatEntryItems",
    "output",
    "items",
    "il",
    "item",
    "msg",
    "text",
    "trace",
    "Array",
    "list",
    "j",
    "jl",
    "push",
    "type",
    "join",
    "toText",
    "toTextArray",
    "toHtml",
    "sub",
    "toHashCode",
    "escapeHTML",
    "key",
    "wrapper",
    "document",
    "createElement",
    "innerHTML",
    "className",
    "level",
    "statics",
    "__defaultFormatter",
    "getFormatter",
    "setFormatter",
    "instance",
    "value",
    "String",
    "replace",
    "__escapeHTMLReplace",
    "ch",
    "map"
  ],
  "mappings": "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",
  "sourcesContent": [
    "qx.Class.define(\"qx.log.appender.Formatter\", {\n  extend: qx.core.Object,\n\n  properties: {\n    /** How to format time in an entry; offset since start (backwards compatible) or as actual date/time */\n    formatTimeAs: {\n      init: \"offset\",\n      check: [\"offset\", \"datetime\"]\n    }\n  },\n\n  members: {\n    /**\n     * Formats a numeric time offset to 6 characters.\n     *\n     * @param offset\n     *          {Integer} Current offset value\n     * @param length\n     *          {Integer?6} Refine the length\n     * @return {String} Padded string\n     */\n    formatOffset(offset, length) {\n      var str = offset.toString();\n      var diff = (length || 6) - str.length;\n      var pad = \"\";\n\n      for (var i = 0; i < diff; i++) {\n        pad += \"0\";\n      }\n\n      return pad + str;\n    },\n\n    /**\n     * Formats the time part of an entry\n     *\n     * @param entry {Map} the entry to output\n     * @return {String} formatted time, as an offset or date time depending on `formatTimeAs` property\n     */\n    formatEntryTime(entry) {\n      if (this.getFormatTimeAs() == \"offset\") {\n        return this.formatOffset(entry.offset, 6);\n      }\n      if (!qx.log.appender.Formatter.__DATETIME_FORMAT) {\n        qx.log.appender.Formatter.__DATETIME_FORMAT =\n          new qx.util.format.DateFormat(\"YYYY-MM-dd HH:mm:ss\");\n      }\n      return qx.log.appender.Formatter.__DATETIME_FORMAT.format(entry.time);\n    },\n\n    /**\n     * Normalises the entry into an object with clazz, object, hash.\n     *\n     * @param entry {Map} the entry to output\n     * @return {Map} result, containing:\n     *  clazz {Class?} the class of the object\n     *  object {Object?} the object\n     *  hash {String?} the hash code\n     */\n    normalizeEntryClass(entry) {\n      var result = {\n        clazz: null,\n        object: null,\n        hash: null\n      };\n\n      if (entry.object) {\n        result.hash = entry.object;\n        if (entry.clazz) {\n          result.clazz = entry.clazz;\n        } else {\n          var obj = entry.win.qx.core.ObjectRegistry.fromHashCode(\n            entry.object,\n            true\n          );\n\n          if (obj) {\n            result.clazz = obj.constructor;\n            result.object = obj;\n          }\n        }\n      } else if (entry.clazz) {\n        result.clazz = entry.clazz;\n      }\n\n      return result;\n    },\n\n    /**\n     * Formats the object part of an entry\n     *\n     * @param entry {Map} the entry to output\n     * @return {String} formatted object, with class and hash code if possible\n     */\n    formatEntryObjectAndClass(entry) {\n      var breakdown = this.normalizeEntryClass(entry);\n      var result = \"\";\n      if (breakdown.clazz) {\n        result += breakdown.clazz.classname;\n      }\n      if (breakdown.hash) {\n        result += \"[\" + breakdown.hash + \"]\";\n      }\n      result += \":\";\n      return result;\n    },\n\n    /**\n     * Formats the items part of an entry\n     *\n     * @param entry {Map} the entry to output\n     * @return {String} formatted items\n     */\n    formatEntryItems(entry) {\n      var output = [];\n      var items = entry.items;\n\n      for (var i = 0, il = items.length; i < il; i++) {\n        var item = items[i];\n        var msg = item.text;\n\n        if (item.trace && item.trace.length > 0) {\n          msg += \"\\n\" + item.trace;\n        }\n\n        if (msg instanceof Array) {\n          var list = [];\n          for (var j = 0, jl = msg.length; j < jl; j++) {\n            list.push(msg[j].text);\n          }\n\n          if (item.type === \"map\") {\n            output.push(\"{\", list.join(\", \"), \"}\");\n          } else {\n            output.push(\"[\", list.join(\", \"), \"]\");\n          }\n        } else {\n          output.push(msg);\n        }\n      }\n\n      return output.join(\" \");\n    },\n\n    /**\n     * Converts a single log entry to plain text\n     *\n     * @param entry {Map} The entry to process\n     * @return {String} the formatted log entry\n     */\n    toText(entry) {\n      var output =\n        this.formatEntryTime(entry) +\n        \" \" +\n        this.formatEntryObjectAndClass(entry);\n      var str = this.formatEntryItems(entry);\n      if (str) {\n        output += \" \" + str;\n      }\n\n      return output;\n    },\n\n    /**\n     * Converts a single log entry to an array of plain text.\n     *\n     * This use of arrays is an outdated performance improvement, and as there is no\n     * specification of what is in each of the elements of the array, there is no value\n     * in preserving this.  This method is deprecated because it will be removed in 7.0\n     * and only toText will remain.  Note that toTextArray is not used anywhere in Qooxdoo.\n     *\n     * @param entry {Map} The entry to process\n     * @return {Array} Argument list ready message array.\n     * @deprecated {6.0} See toText instead\n     */\n    toTextArray(entry) {\n      var output = [];\n\n      output.push(this.formatEntryTime(entry));\n      output.push(this.formatEntryObjectAndClass(entry));\n      output.push(this.formatEntryItems(entry));\n\n      return output;\n    },\n\n    /**\n     * Converts a single log entry to HTML\n     *\n     * @signature function(entry)\n     * @param entry {Map} The entry to process\n     */\n    toHtml(entry) {\n      var output = [];\n      var item, msg, sub, list;\n\n      output.push(\n        \"<span class='offset'>\",\n        this.formatEntryTime(entry),\n        \"</span> \"\n      );\n\n      var breakdown = this.normalizeEntryClass(entry);\n      var result = \"\";\n      if (breakdown.clazz) {\n        result += breakdown.clazz.classname;\n      }\n      if (breakdown.object) {\n        output.push(\n          \"<span class='object' title='Object instance with hash code: \" +\n            breakdown.object.toHashCode() +\n            \"'>\",\n          breakdown.classname,\n          \"[\",\n          breakdown.object,\n          \"]</span>: \"\n        );\n      } else if (breakdown.hash) {\n        output.push(\n          \"<span class='object' title='Object instance with hash code: \" +\n            breakdown.hash +\n            \"'>\",\n          breakdown.classname,\n          \"[\",\n          breakdown.hash,\n          \"]</span>: \"\n        );\n      } else if (breakdown.clazz) {\n        output.push(\n          \"<span class='object'>\" + breakdown.clazz.classname,\n          \"</span>: \"\n        );\n      }\n\n      var items = entry.items;\n      for (var i = 0, il = items.length; i < il; i++) {\n        item = items[i];\n        msg = item.text;\n\n        if (msg instanceof Array) {\n          var list = [];\n\n          for (var j = 0, jl = msg.length; j < jl; j++) {\n            sub = msg[j];\n            if (typeof sub === \"string\") {\n              list.push(\n                \"<span>\" + qx.log.appender.Formatter.escapeHTML(sub) + \"</span>\"\n              );\n            } else if (sub.key) {\n              list.push(\n                \"<span class='type-key'>\" +\n                  sub.key +\n                  \"</span>:<span class='type-\" +\n                  sub.type +\n                  \"'>\" +\n                  qx.log.appender.Formatter.escapeHTML(sub.text) +\n                  \"</span>\"\n              );\n            } else {\n              list.push(\n                \"<span class='type-\" +\n                  sub.type +\n                  \"'>\" +\n                  qx.log.appender.Formatter.escapeHTML(sub.text) +\n                  \"</span>\"\n              );\n            }\n          }\n\n          output.push(\"<span class='type-\" + item.type + \"'>\");\n\n          if (item.type === \"map\") {\n            output.push(\"{\", list.join(\", \"), \"}\");\n          } else {\n            output.push(\"[\", list.join(\", \"), \"]\");\n          }\n\n          output.push(\"</span>\");\n        } else {\n          output.push(\n            \"<span class='type-\" +\n              item.type +\n              \"'>\" +\n              qx.log.appender.Formatter.escapeHTML(msg) +\n              \"</span> \"\n          );\n        }\n      }\n\n      var wrapper = document.createElement(\"DIV\");\n      wrapper.innerHTML = output.join(\"\");\n      wrapper.className = \"level-\" + entry.level;\n\n      return wrapper;\n    }\n  },\n\n  statics: {\n    /** @type {qx.util.format.DateFormat} format for datetimes */\n    __DATETIME_FORMAT: null,\n\n    /** @type {qx.log.appender.Formatter} the default instance */\n    __defaultFormatter: null,\n\n    /**\n     * Returns the default formatter\n     *\n     * @return {qx.log.appender.Formatter}\n     */\n    getFormatter() {\n      if (!qx.log.appender.Formatter.__defaultFormatter) {\n        qx.log.appender.Formatter.__defaultFormatter =\n          new qx.log.appender.Formatter();\n      }\n      return qx.log.appender.Formatter.__defaultFormatter;\n    },\n\n    /**\n     * Sets the default formatter\n     *\n     * @param instance {qx.log.appender.Formatter}\n     */\n    setFormatter(instance) {\n      qx.log.appender.Formatter.__defaultFormatter = instance;\n    },\n\n    /**\n     * Escapes the HTML in the given value\n     *\n     * @param value\n     *          {String} value to escape\n     * @return {String} escaped value\n     */\n    escapeHTML(value) {\n      return String(value).replace(\n        /[<>&\"']/g,\n        qx.log.appender.Formatter.__escapeHTMLReplace\n      );\n    },\n\n    /**\n     * Internal replacement helper for HTML escape.\n     *\n     * @param ch\n     *          {String} Single item to replace.\n     * @return {String} Replaced item\n     */\n    __escapeHTMLReplace(ch) {\n      var map = {\n        \"<\": \"&lt;\",\n        \">\": \"&gt;\",\n        \"&\": \"&amp;\",\n        \"'\": \"&#39;\",\n        '\"': \"&quot;\"\n      };\n\n      return map[ch] || \"?\";\n    }\n  }\n});\n"
  ]
}